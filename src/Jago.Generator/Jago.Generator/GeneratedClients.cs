//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable CS8765 // Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes).

namespace Jago.Generator
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public Client(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.spacetraders.io/v2";
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Get Status
        /// </summary>
        /// <remarks>
        /// Return the status of the game server.
        /// <br/>This also includes a few global elements, such as announcements, server reset dates and leaderboards.
        /// </remarks>a
        /// <returns>Fetched status successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response> GetStatusAsync()
        {
            return GetStatusAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Status
        /// </summary>
        /// <remarks>
        /// Return the status of the game server.
        /// <br/>This also includes a few global elements, such as announcements, server reset dates and leaderboards.
        /// </remarks>
        /// <returns>Fetched status successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> GetStatusAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: ""

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Register New Agent
        /// </summary>
        /// <remarks>
        /// Creates a new agent and ties it to an account. 
        /// <br/>The agent symbol must consist of a 3-14 character string, and will be used to represent your agent. This symbol will prefix the symbol of every ship you own. Agent symbols will be cast to all uppercase characters.
        /// <br/>
        /// <br/>This new agent will be tied to a starting faction of your choice, which determines your starting location, and will be granted an authorization token, a contract with their starting faction, a command ship that can fly across space with advanced capabilities, a small probe ship that can be used for reconnaissance, and 150,000 credits.
        /// <br/>
        /// <br/>&gt; #### Keep your token safe and secure
        /// <br/>&gt;
        /// <br/>&gt; Save your token during the alpha phase. There is no way to regenerate this token without starting a new agent. In the future you will be able to generate and manage your tokens from the SpaceTraders website.
        /// <br/>
        /// <br/>If you are new to SpaceTraders, It is recommended to register with the COSMIC faction, a faction that is well connected to the rest of the universe. After registering, you should try our interactive [quickstart guide](https://docs.spacetraders.io/quickstart/new-game) which will walk you through basic API requests in just a few minutes.
        /// </remarks>
        /// <returns>Succesfully registered.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response2> RegisterAsync(Body body)
        {
            return RegisterAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Register New Agent
        /// </summary>
        /// <remarks>
        /// Creates a new agent and ties it to an account. 
        /// <br/>The agent symbol must consist of a 3-14 character string, and will be used to represent your agent. This symbol will prefix the symbol of every ship you own. Agent symbols will be cast to all uppercase characters.
        /// <br/>
        /// <br/>This new agent will be tied to a starting faction of your choice, which determines your starting location, and will be granted an authorization token, a contract with their starting faction, a command ship that can fly across space with advanced capabilities, a small probe ship that can be used for reconnaissance, and 150,000 credits.
        /// <br/>
        /// <br/>&gt; #### Keep your token safe and secure
        /// <br/>&gt;
        /// <br/>&gt; Save your token during the alpha phase. There is no way to regenerate this token without starting a new agent. In the future you will be able to generate and manage your tokens from the SpaceTraders website.
        /// <br/>
        /// <br/>If you are new to SpaceTraders, It is recommended to register with the COSMIC faction, a faction that is well connected to the rest of the universe. After registering, you should try our interactive [quickstart guide](https://docs.spacetraders.io/quickstart/new-game) which will walk you through basic API requests in just a few minutes.
        /// </remarks>
        /// <returns>Succesfully registered.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response2> RegisterAsync(Body body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "register"
                    urlBuilder_.Append("register");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Systems
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all systems.
        /// </remarks>
        /// <param name="page">What entry offset to request</param>
        /// <param name="limit">How many entries to return per page</param>
        /// <returns>Successfully listed systems.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response3> GetSystemsAsync(int? page, int? limit)
        {
            return GetSystemsAsync(page, limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Systems
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all systems.
        /// </remarks>
        /// <param name="page">What entry offset to request</param>
        /// <param name="limit">How many entries to return per page</param>
        /// <returns>Successfully listed systems.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response3> GetSystemsAsync(int? page, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "systems"
                    urlBuilder_.Append("systems");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get System
        /// </summary>
        /// <remarks>
        /// Get the details of a system.
        /// </remarks>
        /// <param name="systemSymbol">The system symbol</param>
        /// <returns>Successfully fetched the system.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response4> GetSystemAsync(string systemSymbol)
        {
            return GetSystemAsync(systemSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get System
        /// </summary>
        /// <remarks>
        /// Get the details of a system.
        /// </remarks>
        /// <param name="systemSymbol">The system symbol</param>
        /// <returns>Successfully fetched the system.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response4> GetSystemAsync(string systemSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (systemSymbol == null)
                throw new System.ArgumentNullException("systemSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "systems/{systemSymbol}"
                    urlBuilder_.Append("systems/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(systemSymbol, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response4>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Waypoints in System
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all of the waypoints for a given system.
        /// <br/>
        /// <br/>If a waypoint is uncharted, it will return the `Uncharted` trait instead of its actual traits.
        /// </remarks>
        /// <param name="page">What entry offset to request</param>
        /// <param name="limit">How many entries to return per page</param>
        /// <param name="type">Filter waypoints by type.</param>
        /// <param name="traits">Filter waypoints by one or more traits.</param>
        /// <param name="systemSymbol">The system symbol</param>
        /// <returns>Successfully fetched all waypoints in the system.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response5> GetSystemWaypointsAsync(int? page, int? limit, Json13? type, Json40? traits, string systemSymbol)
        {
            return GetSystemWaypointsAsync(page, limit, type, traits, systemSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Waypoints in System
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all of the waypoints for a given system.
        /// <br/>
        /// <br/>If a waypoint is uncharted, it will return the `Uncharted` trait instead of its actual traits.
        /// </remarks>
        /// <param name="page">What entry offset to request</param>
        /// <param name="limit">How many entries to return per page</param>
        /// <param name="type">Filter waypoints by type.</param>
        /// <param name="traits">Filter waypoints by one or more traits.</param>
        /// <param name="systemSymbol">The system symbol</param>
        /// <returns>Successfully fetched all waypoints in the system.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response5> GetSystemWaypointsAsync(int? page, int? limit, Json13? type, Json40? traits, string systemSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (systemSymbol == null)
                throw new System.ArgumentNullException("systemSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "systems/{systemSymbol}/waypoints"
                    urlBuilder_.Append("systems/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(systemSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/waypoints");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (traits != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("traits")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(traits, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Waypoint
        /// </summary>
        /// <remarks>
        /// View the details of a waypoint.
        /// <br/>
        /// <br/>If the waypoint is uncharted, it will return the 'Uncharted' trait instead of its actual traits.
        /// </remarks>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Successfully fetched waypoint.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response6> GetWaypointAsync(string systemSymbol, string waypointSymbol)
        {
            return GetWaypointAsync(systemSymbol, waypointSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Waypoint
        /// </summary>
        /// <remarks>
        /// View the details of a waypoint.
        /// <br/>
        /// <br/>If the waypoint is uncharted, it will return the 'Uncharted' trait instead of its actual traits.
        /// </remarks>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Successfully fetched waypoint.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response6> GetWaypointAsync(string systemSymbol, string waypointSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (systemSymbol == null)
                throw new System.ArgumentNullException("systemSymbol");

            if (waypointSymbol == null)
                throw new System.ArgumentNullException("waypointSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "systems/{systemSymbol}/waypoints/{waypointSymbol}"
                    urlBuilder_.Append("systems/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(systemSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/waypoints/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(waypointSymbol, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response6>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Market
        /// </summary>
        /// <remarks>
        /// Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the `Marketplace` trait to use.
        /// <br/>
        /// <br/>Send a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.
        /// </remarks>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Successfully fetched the market.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response7> GetMarketAsync(string systemSymbol, string waypointSymbol)
        {
            return GetMarketAsync(systemSymbol, waypointSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Market
        /// </summary>
        /// <remarks>
        /// Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the `Marketplace` trait to use.
        /// <br/>
        /// <br/>Send a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.
        /// </remarks>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Successfully fetched the market.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response7> GetMarketAsync(string systemSymbol, string waypointSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (systemSymbol == null)
                throw new System.ArgumentNullException("systemSymbol");

            if (waypointSymbol == null)
                throw new System.ArgumentNullException("waypointSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "systems/{systemSymbol}/waypoints/{waypointSymbol}/market"
                    urlBuilder_.Append("systems/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(systemSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/waypoints/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(waypointSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/market");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response7>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Shipyard
        /// </summary>
        /// <remarks>
        /// Get the shipyard for a waypoint. Requires a waypoint that has the `Shipyard` trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.
        /// </remarks>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Successfully fetched the shipyard.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response8> GetShipyardAsync(string systemSymbol, string waypointSymbol)
        {
            return GetShipyardAsync(systemSymbol, waypointSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Shipyard
        /// </summary>
        /// <remarks>
        /// Get the shipyard for a waypoint. Requires a waypoint that has the `Shipyard` trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.
        /// </remarks>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Successfully fetched the shipyard.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response8> GetShipyardAsync(string systemSymbol, string waypointSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (systemSymbol == null)
                throw new System.ArgumentNullException("systemSymbol");

            if (waypointSymbol == null)
                throw new System.ArgumentNullException("waypointSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "systems/{systemSymbol}/waypoints/{waypointSymbol}/shipyard"
                    urlBuilder_.Append("systems/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(systemSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/waypoints/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(waypointSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/shipyard");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response8>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Jump Gate
        /// </summary>
        /// <remarks>
        /// Get jump gate details for a waypoint. Requires a waypoint of type `JUMP_GATE` to use.
        /// <br/>
        /// <br/>Waypoints connected to this jump gate can be
        /// </remarks>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Successfully fetched jump gate.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response9> GetJumpGateAsync(string systemSymbol, string waypointSymbol)
        {
            return GetJumpGateAsync(systemSymbol, waypointSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Jump Gate
        /// </summary>
        /// <remarks>
        /// Get jump gate details for a waypoint. Requires a waypoint of type `JUMP_GATE` to use.
        /// <br/>
        /// <br/>Waypoints connected to this jump gate can be
        /// </remarks>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Successfully fetched jump gate.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response9> GetJumpGateAsync(string systemSymbol, string waypointSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (systemSymbol == null)
                throw new System.ArgumentNullException("systemSymbol");

            if (waypointSymbol == null)
                throw new System.ArgumentNullException("waypointSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "systems/{systemSymbol}/waypoints/{waypointSymbol}/jump-gate"
                    urlBuilder_.Append("systems/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(systemSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/waypoints/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(waypointSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/jump-gate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response9>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Construction Site
        /// </summary>
        /// <remarks>
        /// Get construction details for a waypoint. Requires a waypoint with a property of `isUnderConstruction` to be true.
        /// </remarks>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Successfully fetched construction site.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response10> GetConstructionAsync(string systemSymbol, string waypointSymbol)
        {
            return GetConstructionAsync(systemSymbol, waypointSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Construction Site
        /// </summary>
        /// <remarks>
        /// Get construction details for a waypoint. Requires a waypoint with a property of `isUnderConstruction` to be true.
        /// </remarks>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Successfully fetched construction site.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response10> GetConstructionAsync(string systemSymbol, string waypointSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (systemSymbol == null)
                throw new System.ArgumentNullException("systemSymbol");

            if (waypointSymbol == null)
                throw new System.ArgumentNullException("waypointSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "systems/{systemSymbol}/waypoints/{waypointSymbol}/construction"
                    urlBuilder_.Append("systems/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(systemSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/waypoints/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(waypointSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/construction");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response10>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Supply Construction Site
        /// </summary>
        /// <remarks>
        /// Supply a construction site with the specified good. Requires a waypoint with a property of `isUnderConstruction` to be true.
        /// <br/>
        /// <br/>The good must be in your ship's cargo. The good will be removed from your ship's cargo and added to the construction site's materials.
        /// </remarks>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Successfully supplied construction site.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response11> SupplyConstructionAsync(Body2 body, string systemSymbol, string waypointSymbol)
        {
            return SupplyConstructionAsync(body, systemSymbol, waypointSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supply Construction Site
        /// </summary>
        /// <remarks>
        /// Supply a construction site with the specified good. Requires a waypoint with a property of `isUnderConstruction` to be true.
        /// <br/>
        /// <br/>The good must be in your ship's cargo. The good will be removed from your ship's cargo and added to the construction site's materials.
        /// </remarks>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <returns>Successfully supplied construction site.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response11> SupplyConstructionAsync(Body2 body, string systemSymbol, string waypointSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (systemSymbol == null)
                throw new System.ArgumentNullException("systemSymbol");

            if (waypointSymbol == null)
                throw new System.ArgumentNullException("waypointSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "systems/{systemSymbol}/waypoints/{waypointSymbol}/construction/supply"
                    urlBuilder_.Append("systems/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(systemSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/waypoints/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(waypointSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/construction/supply");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response11>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Factions
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all the factions in the game.
        /// </remarks>
        /// <param name="page">What entry offset to request</param>
        /// <param name="limit">How many entries to return per page</param>
        /// <returns>Succesfully fetched factions.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response12> GetFactionsAsync(int? page, int? limit)
        {
            return GetFactionsAsync(page, limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Factions
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all the factions in the game.
        /// </remarks>
        /// <param name="page">What entry offset to request</param>
        /// <param name="limit">How many entries to return per page</param>
        /// <returns>Succesfully fetched factions.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response12> GetFactionsAsync(int? page, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "factions"
                    urlBuilder_.Append("factions");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response12>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Faction
        /// </summary>
        /// <remarks>
        /// View the details of a faction.
        /// </remarks>
        /// <param name="factionSymbol">The faction symbol</param>
        /// <returns>Successfully fetched a faction.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response13> GetFactionAsync(string factionSymbol)
        {
            return GetFactionAsync(factionSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Faction
        /// </summary>
        /// <remarks>
        /// View the details of a faction.
        /// </remarks>
        /// <param name="factionSymbol">The faction symbol</param>
        /// <returns>Successfully fetched a faction.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response13> GetFactionAsync(string factionSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (factionSymbol == null)
                throw new System.ArgumentNullException("factionSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "factions/{factionSymbol}"
                    urlBuilder_.Append("factions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(factionSymbol, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response13>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Agent
        /// </summary>
        /// <remarks>
        /// Fetch your agent's details.
        /// </remarks>
        /// <returns>Successfully fetched agent details.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response14> GetMyAgentAsync()
        {
            return GetMyAgentAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Agent
        /// </summary>
        /// <remarks>
        /// Fetch your agent's details.
        /// </remarks>
        /// <returns>Successfully fetched agent details.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response14> GetMyAgentAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/agent"
                    urlBuilder_.Append("my/agent");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response14>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Agents
        /// </summary>
        /// <remarks>
        /// Fetch agents details.
        /// </remarks>
        /// <param name="page">What entry offset to request</param>
        /// <param name="limit">How many entries to return per page</param>
        /// <returns>Successfully fetched agents details.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response15> GetAgentsAsync(int? page, int? limit)
        {
            return GetAgentsAsync(page, limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Agents
        /// </summary>
        /// <remarks>
        /// Fetch agents details.
        /// </remarks>
        /// <param name="page">What entry offset to request</param>
        /// <param name="limit">How many entries to return per page</param>
        /// <returns>Successfully fetched agents details.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response15> GetAgentsAsync(int? page, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "agents"
                    urlBuilder_.Append("agents");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response15>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Public Agent
        /// </summary>
        /// <remarks>
        /// Fetch agent details.
        /// </remarks>
        /// <param name="agentSymbol">The agent symbol</param>
        /// <returns>Successfully fetched agent details.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response16> GetAgentAsync(string agentSymbol)
        {
            return GetAgentAsync(agentSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Public Agent
        /// </summary>
        /// <remarks>
        /// Fetch agent details.
        /// </remarks>
        /// <param name="agentSymbol">The agent symbol</param>
        /// <returns>Successfully fetched agent details.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response16> GetAgentAsync(string agentSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (agentSymbol == null)
                throw new System.ArgumentNullException("agentSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "agents/{agentSymbol}"
                    urlBuilder_.Append("agents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(agentSymbol, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response16>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Contracts
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all your contracts.
        /// </remarks>
        /// <param name="page">What entry offset to request</param>
        /// <param name="limit">How many entries to return per page</param>
        /// <returns>Succesfully listed contracts.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response17> GetContractsAsync(int? page, int? limit)
        {
            return GetContractsAsync(page, limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Contracts
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all your contracts.
        /// </remarks>
        /// <param name="page">What entry offset to request</param>
        /// <param name="limit">How many entries to return per page</param>
        /// <returns>Succesfully listed contracts.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response17> GetContractsAsync(int? page, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/contracts"
                    urlBuilder_.Append("my/contracts");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response17>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Contract
        /// </summary>
        /// <remarks>
        /// Get the details of a contract by ID.
        /// </remarks>
        /// <param name="contractId">The contract ID</param>
        /// <returns>Successfully fetched contract.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response18> GetContractAsync(string contractId)
        {
            return GetContractAsync(contractId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Contract
        /// </summary>
        /// <remarks>
        /// Get the details of a contract by ID.
        /// </remarks>
        /// <param name="contractId">The contract ID</param>
        /// <returns>Successfully fetched contract.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response18> GetContractAsync(string contractId, System.Threading.CancellationToken cancellationToken)
        {
            if (contractId == null)
                throw new System.ArgumentNullException("contractId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/contracts/{contractId}"
                    urlBuilder_.Append("my/contracts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(contractId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response18>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Accept Contract
        /// </summary>
        /// <remarks>
        /// Accept a contract by ID. 
        /// <br/>
        /// <br/>You can only accept contracts that were offered to you, were not accepted yet, and whose deadlines has not passed yet.
        /// </remarks>
        /// <param name="contractId">The contract ID to accept.</param>
        /// <returns>Succesfully accepted contract.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response19> AcceptContractAsync(string contractId)
        {
            return AcceptContractAsync(contractId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Accept Contract
        /// </summary>
        /// <remarks>
        /// Accept a contract by ID. 
        /// <br/>
        /// <br/>You can only accept contracts that were offered to you, were not accepted yet, and whose deadlines has not passed yet.
        /// </remarks>
        /// <param name="contractId">The contract ID to accept.</param>
        /// <returns>Succesfully accepted contract.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response19> AcceptContractAsync(string contractId, System.Threading.CancellationToken cancellationToken)
        {
            if (contractId == null)
                throw new System.ArgumentNullException("contractId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/contracts/{contractId}/accept"
                    urlBuilder_.Append("my/contracts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(contractId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accept");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response19>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deliver Cargo to Contract
        /// </summary>
        /// <remarks>
        /// Deliver cargo to a contract.
        /// <br/>
        /// <br/>In order to use this API, a ship must be at the delivery location (denoted in the delivery terms as `destinationSymbol` of a contract) and must have a number of units of a good required by this contract in its cargo.
        /// <br/>
        /// <br/>Cargo that was delivered will be removed from the ship's cargo.
        /// </remarks>
        /// <param name="contractId">The ID of the contract.</param>
        /// <returns>Successfully delivered cargo to contract.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response20> DeliverContractAsync(Body3 body, string contractId)
        {
            return DeliverContractAsync(body, contractId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deliver Cargo to Contract
        /// </summary>
        /// <remarks>
        /// Deliver cargo to a contract.
        /// <br/>
        /// <br/>In order to use this API, a ship must be at the delivery location (denoted in the delivery terms as `destinationSymbol` of a contract) and must have a number of units of a good required by this contract in its cargo.
        /// <br/>
        /// <br/>Cargo that was delivered will be removed from the ship's cargo.
        /// </remarks>
        /// <param name="contractId">The ID of the contract.</param>
        /// <returns>Successfully delivered cargo to contract.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response20> DeliverContractAsync(Body3 body, string contractId, System.Threading.CancellationToken cancellationToken)
        {
            if (contractId == null)
                throw new System.ArgumentNullException("contractId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/contracts/{contractId}/deliver"
                    urlBuilder_.Append("my/contracts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(contractId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/deliver");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response20>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Fulfill Contract
        /// </summary>
        /// <remarks>
        /// Fulfill a contract. Can only be used on contracts that have all of their delivery terms fulfilled.
        /// </remarks>
        /// <param name="contractId">The ID of the contract to fulfill.</param>
        /// <returns>Successfully fulfilled a contract.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response21> FulfillContractAsync(string contractId)
        {
            return FulfillContractAsync(contractId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fulfill Contract
        /// </summary>
        /// <remarks>
        /// Fulfill a contract. Can only be used on contracts that have all of their delivery terms fulfilled.
        /// </remarks>
        /// <param name="contractId">The ID of the contract to fulfill.</param>
        /// <returns>Successfully fulfilled a contract.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response21> FulfillContractAsync(string contractId, System.Threading.CancellationToken cancellationToken)
        {
            if (contractId == null)
                throw new System.ArgumentNullException("contractId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/contracts/{contractId}/fulfill"
                    urlBuilder_.Append("my/contracts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(contractId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/fulfill");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response21>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Ships
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all of ships under your agent's ownership.
        /// </remarks>
        /// <param name="page">What entry offset to request</param>
        /// <param name="limit">How many entries to return per page</param>
        /// <returns>Succesfully listed ships.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response22> GetMyShipsAsync(int? page, int? limit)
        {
            return GetMyShipsAsync(page, limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Ships
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all of ships under your agent's ownership.
        /// </remarks>
        /// <param name="page">What entry offset to request</param>
        /// <param name="limit">How many entries to return per page</param>
        /// <returns>Succesfully listed ships.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response22> GetMyShipsAsync(int? page, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships"
                    urlBuilder_.Append("my/ships");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response22>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Purchase Ship
        /// </summary>
        /// <remarks>
        /// Purchase a ship from a Shipyard. In order to use this function, a ship under your agent's ownership must be in a waypoint that has the `Shipyard` trait, and the Shipyard must sell the type of the desired ship.
        /// <br/>
        /// <br/>Shipyards typically offer ship types, which are predefined templates of ships that have dedicated roles. A template comes with a preset of an engine, a reactor, and a frame. It may also include a few modules and mounts.
        /// </remarks>
        /// <returns>Purchased ship successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response23> PurchaseShipAsync(Body4 body)
        {
            return PurchaseShipAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Purchase Ship
        /// </summary>
        /// <remarks>
        /// Purchase a ship from a Shipyard. In order to use this function, a ship under your agent's ownership must be in a waypoint that has the `Shipyard` trait, and the Shipyard must sell the type of the desired ship.
        /// <br/>
        /// <br/>Shipyards typically offer ship types, which are predefined templates of ships that have dedicated roles. A template comes with a preset of an engine, a reactor, and a frame. It may also include a few modules and mounts.
        /// </remarks>
        /// <returns>Purchased ship successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response23> PurchaseShipAsync(Body4 body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships"
                    urlBuilder_.Append("my/ships");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response23>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Ship
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a ship under your agent's ownership.
        /// </remarks>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Successfully fetched ship.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response24> GetMyShipAsync(string shipSymbol)
        {
            return GetMyShipAsync(shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Ship
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a ship under your agent's ownership.
        /// </remarks>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Successfully fetched ship.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response24> GetMyShipAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response24>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Ship Cargo
        /// </summary>
        /// <remarks>
        /// Retrieve the cargo of a ship under your agent's ownership.
        /// </remarks>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Successfully fetched ship's cargo.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response25> GetMyShipCargoAsync(string shipSymbol)
        {
            return GetMyShipCargoAsync(shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Ship Cargo
        /// </summary>
        /// <remarks>
        /// Retrieve the cargo of a ship under your agent's ownership.
        /// </remarks>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Successfully fetched ship's cargo.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response25> GetMyShipCargoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/cargo"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/cargo");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response25>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Orbit Ship
        /// </summary>
        /// <remarks>
        /// Attempt to move your ship into orbit at its current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.
        /// <br/>
        /// <br/>Orbiting ships are able to do actions that require the ship to be above surface such as navigating or extracting, but cannot access elements in their current waypoint, such as the market or a shipyard.
        /// <br/>
        /// <br/>The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
        /// </remarks>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>The ship has successfully moved into orbit at its current location.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response26> OrbitShipAsync(string shipSymbol)
        {
            return OrbitShipAsync(shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Orbit Ship
        /// </summary>
        /// <remarks>
        /// Attempt to move your ship into orbit at its current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.
        /// <br/>
        /// <br/>Orbiting ships are able to do actions that require the ship to be above surface such as navigating or extracting, but cannot access elements in their current waypoint, such as the market or a shipyard.
        /// <br/>
        /// <br/>The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
        /// </remarks>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>The ship has successfully moved into orbit at its current location.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response26> OrbitShipAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/orbit"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/orbit");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response26>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Ship Refine
        /// </summary>
        /// <remarks>
        /// Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request. In order to be able to refine, a ship must have goods that can be refined and have installed a `Refinery` module that can refine it.
        /// <br/>
        /// <br/>When refining, 30 basic goods will be converted into 10 processed goods.
        /// </remarks>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>The ship has successfully refined goods.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response27> ShipRefineAsync(Body5 body, string shipSymbol)
        {
            return ShipRefineAsync(body, shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ship Refine
        /// </summary>
        /// <remarks>
        /// Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request. In order to be able to refine, a ship must have goods that can be refined and have installed a `Refinery` module that can refine it.
        /// <br/>
        /// <br/>When refining, 30 basic goods will be converted into 10 processed goods.
        /// </remarks>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>The ship has successfully refined goods.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response27> ShipRefineAsync(Body5 body, string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/refine"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/refine");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response27>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Chart
        /// </summary>
        /// <remarks>
        /// Command a ship to chart the waypoint at its current location.
        /// <br/>
        /// <br/>Most waypoints in the universe are uncharted by default. These waypoints have their traits hidden until they have been charted by a ship.
        /// <br/>
        /// <br/>Charting a waypoint will record your agent as the one who created the chart, and all other agents would also be able to see the waypoint's traits.
        /// </remarks>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response28> CreateChartAsync(string shipSymbol)
        {
            return CreateChartAsync(shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Chart
        /// </summary>
        /// <remarks>
        /// Command a ship to chart the waypoint at its current location.
        /// <br/>
        /// <br/>Most waypoints in the universe are uncharted by default. These waypoints have their traits hidden until they have been charted by a ship.
        /// <br/>
        /// <br/>Charting a waypoint will record your agent as the one who created the chart, and all other agents would also be able to see the waypoint's traits.
        /// </remarks>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response28> CreateChartAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/chart"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/chart");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response28>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Ship Cooldown
        /// </summary>
        /// <remarks>
        /// Retrieve the details of your ship's reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.
        /// <br/>
        /// <br/>Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.
        /// <br/>
        /// <br/>Response returns a 204 status code (no-content) when the ship has no cooldown.
        /// </remarks>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Succesfully fetched ship's cooldown.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response29> GetShipCooldownAsync(string shipSymbol)
        {
            return GetShipCooldownAsync(shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Ship Cooldown
        /// </summary>
        /// <remarks>
        /// Retrieve the details of your ship's reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.
        /// <br/>
        /// <br/>Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.
        /// <br/>
        /// <br/>Response returns a 204 status code (no-content) when the ship has no cooldown.
        /// </remarks>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Succesfully fetched ship's cooldown.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response29> GetShipCooldownAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/cooldown"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/cooldown");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response29>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No cooldown.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Dock Ship
        /// </summary>
        /// <remarks>
        /// Attempt to dock your ship at its current location. Docking will only succeed if your ship is capable of docking at the time of the request.
        /// <br/>
        /// <br/>Docked ships can access elements in their current location, such as the market or a shipyard, but cannot do actions that require the ship to be above surface such as navigating or extracting.
        /// <br/>
        /// <br/>The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
        /// </remarks>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>The ship has successfully docked at its current location.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response30> DockShipAsync(string shipSymbol)
        {
            return DockShipAsync(shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Dock Ship
        /// </summary>
        /// <remarks>
        /// Attempt to dock your ship at its current location. Docking will only succeed if your ship is capable of docking at the time of the request.
        /// <br/>
        /// <br/>Docked ships can access elements in their current location, such as the market or a shipyard, but cannot do actions that require the ship to be above surface such as navigating or extracting.
        /// <br/>
        /// <br/>The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
        /// </remarks>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>The ship has successfully docked at its current location.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response30> DockShipAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/dock"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/dock");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response30>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Survey
        /// </summary>
        /// <remarks>
        /// Create surveys on a waypoint that can be extracted such as asteroid fields. A survey focuses on specific types of deposits from the extracted location. When ships extract using this survey, they are guaranteed to procure a high amount of one of the goods in the survey.
        /// <br/>
        /// <br/>In order to use a survey, send the entire survey details in the body of the extract request.
        /// <br/>
        /// <br/>Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.
        /// <br/>
        /// <br/>Your ship will enter a cooldown after surveying in which it is unable to perform certain actions. Surveys will eventually expire after a period of time or will be exhausted after being extracted several times based on the survey's size. Multiple ships can use the same survey for extraction.
        /// <br/>
        /// <br/>A ship must have the `Surveyor` mount installed in order to use this function.
        /// </remarks>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Surveys has been created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response31> CreateSurveyAsync(string shipSymbol)
        {
            return CreateSurveyAsync(shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Survey
        /// </summary>
        /// <remarks>
        /// Create surveys on a waypoint that can be extracted such as asteroid fields. A survey focuses on specific types of deposits from the extracted location. When ships extract using this survey, they are guaranteed to procure a high amount of one of the goods in the survey.
        /// <br/>
        /// <br/>In order to use a survey, send the entire survey details in the body of the extract request.
        /// <br/>
        /// <br/>Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.
        /// <br/>
        /// <br/>Your ship will enter a cooldown after surveying in which it is unable to perform certain actions. Surveys will eventually expire after a period of time or will be exhausted after being extracted several times based on the survey's size. Multiple ships can use the same survey for extraction.
        /// <br/>
        /// <br/>A ship must have the `Surveyor` mount installed in order to use this function.
        /// </remarks>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>Surveys has been created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response31> CreateSurveyAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/survey"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/survey");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response31>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Extract Resources
        /// </summary>
        /// <remarks>
        /// Extract resources from a waypoint that can be extracted, such as asteroid fields, into your ship. Send an optional survey as the payload to target specific yields.
        /// <br/>
        /// <br/>The ship must be in orbit to be able to extract and must have mining equipments installed that can extract goods, such as the `Gas Siphon` mount for gas-based goods or `Mining Laser` mount for ore-based goods.
        /// <br/>
        /// <br/>The survey property is now deprecated. See the `extract/survey` endpoint for more details.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Extracted successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response32> ExtractResourcesAsync(Body6 body, string shipSymbol)
        {
            return ExtractResourcesAsync(body, shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Extract Resources
        /// </summary>
        /// <remarks>
        /// Extract resources from a waypoint that can be extracted, such as asteroid fields, into your ship. Send an optional survey as the payload to target specific yields.
        /// <br/>
        /// <br/>The ship must be in orbit to be able to extract and must have mining equipments installed that can extract goods, such as the `Gas Siphon` mount for gas-based goods or `Mining Laser` mount for ore-based goods.
        /// <br/>
        /// <br/>The survey property is now deprecated. See the `extract/survey` endpoint for more details.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Extracted successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response32> ExtractResourcesAsync(Body6 body, string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/extract"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/extract");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response32>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Siphon Resources
        /// </summary>
        /// <remarks>
        /// Siphon gases, such as hydrocarbon, from gas giants.
        /// <br/>
        /// <br/>The ship must be in orbit to be able to siphon and must have siphon mounts and a gas processor installed.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Siphon successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response33> SiphonResourcesAsync(string shipSymbol)
        {
            return SiphonResourcesAsync(shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Siphon Resources
        /// </summary>
        /// <remarks>
        /// Siphon gases, such as hydrocarbon, from gas giants.
        /// <br/>
        /// <br/>The ship must be in orbit to be able to siphon and must have siphon mounts and a gas processor installed.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Siphon successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response33> SiphonResourcesAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/siphon"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/siphon");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response33>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Extract Resources with Survey
        /// </summary>
        /// <remarks>
        /// Use a survey when extracting resources from a waypoint. This endpoint requires a survey as the payload, which allows your ship to extract specific yields.
        /// <br/>
        /// <br/>Send the full survey object as the payload which will be validated according to the signature. If the signature is invalid, or any properties of the survey are changed, the request will fail.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Extracted successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response34> ExtractResourcesWithSurveyAsync(Json61 body, string shipSymbol)
        {
            return ExtractResourcesWithSurveyAsync(body, shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Extract Resources with Survey
        /// </summary>
        /// <remarks>
        /// Use a survey when extracting resources from a waypoint. This endpoint requires a survey as the payload, which allows your ship to extract specific yields.
        /// <br/>
        /// <br/>Send the full survey object as the payload which will be validated according to the signature. If the signature is invalid, or any properties of the survey are changed, the request will fail.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Extracted successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response34> ExtractResourcesWithSurveyAsync(Json61 body, string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/extract/survey"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/extract/survey");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response34>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Jettison Cargo
        /// </summary>
        /// <remarks>
        /// Jettison cargo from your ship's cargo hold.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Jettison successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response35> JettisonAsync(Body7 body, string shipSymbol)
        {
            return JettisonAsync(body, shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Jettison Cargo
        /// </summary>
        /// <remarks>
        /// Jettison cargo from your ship's cargo hold.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Jettison successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response35> JettisonAsync(Body7 body, string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/jettison"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/jettison");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response35>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Jump Ship
        /// </summary>
        /// <remarks>
        /// Jump your ship instantly to a target connected waypoint. The ship must be in orbit to execute a jump.
        /// <br/>
        /// <br/>A unit of antimatter is purchased and consumed from the market when jumping. The price of antimatter is determined by the market and is subject to change. A ship can only jump to connected waypoints
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Jump successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response36> JumpShipAsync(Body8 body, string shipSymbol)
        {
            return JumpShipAsync(body, shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Jump Ship
        /// </summary>
        /// <remarks>
        /// Jump your ship instantly to a target connected waypoint. The ship must be in orbit to execute a jump.
        /// <br/>
        /// <br/>A unit of antimatter is purchased and consumed from the market when jumping. The price of antimatter is determined by the market and is subject to change. A ship can only jump to connected waypoints
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Jump successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response36> JumpShipAsync(Body8 body, string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/jump"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/jump");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response36>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Navigate Ship
        /// </summary>
        /// <remarks>
        /// Navigate to a target destination. The ship must be in orbit to use this function. The destination waypoint must be within the same system as the ship's current location. Navigating will consume the necessary fuel from the ship's manifest based on the distance to the target waypoint.
        /// <br/>
        /// <br/>The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it's destination.
        /// <br/>
        /// <br/>To travel between systems, see the ship's Warp or Jump actions.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>The successful transit information including the route details and changes to ship fuel. The route includes the expected time of arrival.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response37> NavigateShipAsync(Body9 body, string shipSymbol)
        {
            return NavigateShipAsync(body, shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Navigate Ship
        /// </summary>
        /// <remarks>
        /// Navigate to a target destination. The ship must be in orbit to use this function. The destination waypoint must be within the same system as the ship's current location. Navigating will consume the necessary fuel from the ship's manifest based on the distance to the target waypoint.
        /// <br/>
        /// <br/>The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it's destination.
        /// <br/>
        /// <br/>To travel between systems, see the ship's Warp or Jump actions.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>The successful transit information including the route details and changes to ship fuel. The route includes the expected time of arrival.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response37> NavigateShipAsync(Body9 body, string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/navigate"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/navigate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response37>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Patch Ship Nav
        /// </summary>
        /// <remarks>
        /// Update the nav configuration of a ship.
        /// <br/>
        /// <br/>Currently only supports configuring the Flight Mode of the ship, which affects its speed and fuel consumption.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>The updated nav data of the ship.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response38> PatchShipNavAsync(Body10 body, string shipSymbol)
        {
            return PatchShipNavAsync(body, shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Patch Ship Nav
        /// </summary>
        /// <remarks>
        /// Update the nav configuration of a ship.
        /// <br/>
        /// <br/>Currently only supports configuring the Flight Mode of the ship, which affects its speed and fuel consumption.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>The updated nav data of the ship.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response38> PatchShipNavAsync(Body10 body, string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/nav"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/nav");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response38>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Ship Nav
        /// </summary>
        /// <remarks>
        /// Get the current nav status of a ship.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>The current nav status of the ship.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response39> GetShipNavAsync(string shipSymbol)
        {
            return GetShipNavAsync(shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Ship Nav
        /// </summary>
        /// <remarks>
        /// Get the current nav status of a ship.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>The current nav status of the ship.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response39> GetShipNavAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/nav"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/nav");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response39>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Warp Ship
        /// </summary>
        /// <remarks>
        /// Warp your ship to a target destination in another system. The ship must be in orbit to use this function and must have the `Warp Drive` module installed. Warping will consume the necessary fuel from the ship's manifest.
        /// <br/>
        /// <br/>The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at its destination.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>The successful transit information including the route details and changes to ship fuel. The route includes the expected time of arrival.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response40> WarpShipAsync(Body11 body, string shipSymbol)
        {
            return WarpShipAsync(body, shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Warp Ship
        /// </summary>
        /// <remarks>
        /// Warp your ship to a target destination in another system. The ship must be in orbit to use this function and must have the `Warp Drive` module installed. Warping will consume the necessary fuel from the ship's manifest.
        /// <br/>
        /// <br/>The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at its destination.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>The successful transit information including the route details and changes to ship fuel. The route includes the expected time of arrival.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response40> WarpShipAsync(Body11 body, string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/warp"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/warp");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response40>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sell Cargo
        /// </summary>
        /// <remarks>
        /// Sell cargo in your ship to a market that trades this cargo. The ship must be docked in a waypoint that has the `Marketplace` trait in order to use this function.
        /// </remarks>
        /// <param name="shipSymbol">Symbol of a ship.</param>
        /// <returns>Cargo was successfully sold.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response41> SellCargoAsync(SellCargoRequest body, string shipSymbol)
        {
            return SellCargoAsync(body, shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sell Cargo
        /// </summary>
        /// <remarks>
        /// Sell cargo in your ship to a market that trades this cargo. The ship must be docked in a waypoint that has the `Marketplace` trait in order to use this function.
        /// </remarks>
        /// <param name="shipSymbol">Symbol of a ship.</param>
        /// <returns>Cargo was successfully sold.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response41> SellCargoAsync(SellCargoRequest body, string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/sell"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sell");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response41>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Scan Systems
        /// </summary>
        /// <remarks>
        /// Scan for nearby systems, retrieving information on the systems' distance from the ship and their waypoints. Requires a ship to have the `Sensor Array` mount installed to use.
        /// <br/>
        /// <br/>The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Successfully scanned for nearby systems.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response42> CreateShipSystemScanAsync(string shipSymbol)
        {
            return CreateShipSystemScanAsync(shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Scan Systems
        /// </summary>
        /// <remarks>
        /// Scan for nearby systems, retrieving information on the systems' distance from the ship and their waypoints. Requires a ship to have the `Sensor Array` mount installed to use.
        /// <br/>
        /// <br/>The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Successfully scanned for nearby systems.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response42> CreateShipSystemScanAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/scan/systems"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scan/systems");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response42>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Scan Waypoints
        /// </summary>
        /// <remarks>
        /// Scan for nearby waypoints, retrieving detailed information on each waypoint in range. Scanning uncharted waypoints will allow you to ignore their uncharted state and will list the waypoints' traits.
        /// <br/>
        /// <br/>Requires a ship to have the `Sensor Array` mount installed to use.
        /// <br/>
        /// <br/>The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Successfully scanned for nearby waypoints.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response43> CreateShipWaypointScanAsync(string shipSymbol)
        {
            return CreateShipWaypointScanAsync(shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Scan Waypoints
        /// </summary>
        /// <remarks>
        /// Scan for nearby waypoints, retrieving detailed information on each waypoint in range. Scanning uncharted waypoints will allow you to ignore their uncharted state and will list the waypoints' traits.
        /// <br/>
        /// <br/>Requires a ship to have the `Sensor Array` mount installed to use.
        /// <br/>
        /// <br/>The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Successfully scanned for nearby waypoints.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response43> CreateShipWaypointScanAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/scan/waypoints"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scan/waypoints");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response43>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Scan Ships
        /// </summary>
        /// <remarks>
        /// Scan for nearby ships, retrieving information for all ships in range.
        /// <br/>
        /// <br/>Requires a ship to have the `Sensor Array` mount installed to use.
        /// <br/>
        /// <br/>The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Successfully scanned for nearby ships.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response44> CreateShipShipScanAsync(string shipSymbol)
        {
            return CreateShipShipScanAsync(shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Scan Ships
        /// </summary>
        /// <remarks>
        /// Scan for nearby ships, retrieving information for all ships in range.
        /// <br/>
        /// <br/>Requires a ship to have the `Sensor Array` mount installed to use.
        /// <br/>
        /// <br/>The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Successfully scanned for nearby ships.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response44> CreateShipShipScanAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/scan/ships"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scan/ships");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response44>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Refuel Ship
        /// </summary>
        /// <remarks>
        /// Refuel your ship by buying fuel from the local market.
        /// <br/>
        /// <br/>Requires the ship to be docked in a waypoint that has the `Marketplace` trait, and the market must be selling fuel in order to refuel.
        /// <br/>
        /// <br/>Each fuel bought from the market replenishes 100 units in your ship's fuel.
        /// <br/>
        /// <br/>Ships will always be refuel to their frame's maximum fuel capacity when using this action.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Refueled successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response45> RefuelShipAsync(Body12 body, string shipSymbol)
        {
            return RefuelShipAsync(body, shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Refuel Ship
        /// </summary>
        /// <remarks>
        /// Refuel your ship by buying fuel from the local market.
        /// <br/>
        /// <br/>Requires the ship to be docked in a waypoint that has the `Marketplace` trait, and the market must be selling fuel in order to refuel.
        /// <br/>
        /// <br/>Each fuel bought from the market replenishes 100 units in your ship's fuel.
        /// <br/>
        /// <br/>Ships will always be refuel to their frame's maximum fuel capacity when using this action.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Refueled successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response45> RefuelShipAsync(Body12 body, string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/refuel"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/refuel");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response45>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Purchase Cargo
        /// </summary>
        /// <remarks>
        /// Purchase cargo from a market.
        /// <br/>
        /// <br/>The ship must be docked in a waypoint that has `Marketplace` trait, and the market must be selling a good to be able to purchase it.
        /// <br/>
        /// <br/>The maximum amount of units of a good that can be purchased in each transaction are denoted by the `tradeVolume` value of the good, which can be viewed by using the Get Market action.
        /// <br/>
        /// <br/>Purchased goods are added to the ship's cargo hold.
        /// </remarks>
        /// <param name="shipSymbol">The ship's symbol.</param>
        /// <returns>Purchased goods successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response46> PurchaseCargoAsync(Body13 body, string shipSymbol)
        {
            return PurchaseCargoAsync(body, shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Purchase Cargo
        /// </summary>
        /// <remarks>
        /// Purchase cargo from a market.
        /// <br/>
        /// <br/>The ship must be docked in a waypoint that has `Marketplace` trait, and the market must be selling a good to be able to purchase it.
        /// <br/>
        /// <br/>The maximum amount of units of a good that can be purchased in each transaction are denoted by the `tradeVolume` value of the good, which can be viewed by using the Get Market action.
        /// <br/>
        /// <br/>Purchased goods are added to the ship's cargo hold.
        /// </remarks>
        /// <param name="shipSymbol">The ship's symbol.</param>
        /// <returns>Purchased goods successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response46> PurchaseCargoAsync(Body13 body, string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/purchase"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/purchase");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response46>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Transfer Cargo
        /// </summary>
        /// <remarks>
        /// Transfer cargo between ships.
        /// <br/>
        /// <br/>The receiving ship must be in the same waypoint as the transferring ship, and it must able to hold the additional cargo after the transfer is complete. Both ships also must be in the same state, either both are docked or both are orbiting.
        /// <br/>
        /// <br/>The response body's cargo shows the cargo of the transferring ship after the transfer is complete.
        /// </remarks>
        /// <param name="shipSymbol">The transferring ship's symbol.</param>
        /// <returns>Transfer successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response47> TransferCargoAsync(Body14 body, string shipSymbol)
        {
            return TransferCargoAsync(body, shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Transfer Cargo
        /// </summary>
        /// <remarks>
        /// Transfer cargo between ships.
        /// <br/>
        /// <br/>The receiving ship must be in the same waypoint as the transferring ship, and it must able to hold the additional cargo after the transfer is complete. Both ships also must be in the same state, either both are docked or both are orbiting.
        /// <br/>
        /// <br/>The response body's cargo shows the cargo of the transferring ship after the transfer is complete.
        /// </remarks>
        /// <param name="shipSymbol">The transferring ship's symbol.</param>
        /// <returns>Transfer successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response47> TransferCargoAsync(Body14 body, string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/transfer"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transfer");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response47>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Negotiate Contract
        /// </summary>
        /// <remarks>
        /// Negotiate a new contract with the HQ.
        /// <br/>
        /// <br/>In order to negotiate a new contract, an agent must not have ongoing or offered contracts over the allowed maximum amount. Currently the maximum contracts an agent can have at a time is 1.
        /// <br/>
        /// <br/>Once a contract is negotiated, it is added to the list of contracts offered to the agent, which the agent can then accept. 
        /// <br/>
        /// <br/>The ship must be present at any waypoint with a faction present to negotiate a contract with that faction.
        /// </remarks>
        /// <param name="shipSymbol">The ship's symbol.</param>
        /// <returns>Successfully negotiated a new contract.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response48> NegotiateContractAsync(string shipSymbol)
        {
            return NegotiateContractAsync(shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Negotiate Contract
        /// </summary>
        /// <remarks>
        /// Negotiate a new contract with the HQ.
        /// <br/>
        /// <br/>In order to negotiate a new contract, an agent must not have ongoing or offered contracts over the allowed maximum amount. Currently the maximum contracts an agent can have at a time is 1.
        /// <br/>
        /// <br/>Once a contract is negotiated, it is added to the list of contracts offered to the agent, which the agent can then accept. 
        /// <br/>
        /// <br/>The ship must be present at any waypoint with a faction present to negotiate a contract with that faction.
        /// </remarks>
        /// <param name="shipSymbol">The ship's symbol.</param>
        /// <returns>Successfully negotiated a new contract.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response48> NegotiateContractAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/negotiate/contract"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/negotiate/contract");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response48>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Mounts
        /// </summary>
        /// <remarks>
        /// Get the mounts installed on a ship.
        /// </remarks>
        /// <param name="shipSymbol">The ship's symbol.</param>
        /// <returns>Got installed mounts.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response49> GetMountsAsync(string shipSymbol)
        {
            return GetMountsAsync(shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Mounts
        /// </summary>
        /// <remarks>
        /// Get the mounts installed on a ship.
        /// </remarks>
        /// <param name="shipSymbol">The ship's symbol.</param>
        /// <returns>Got installed mounts.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response49> GetMountsAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/mounts"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/mounts");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response49>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Install Mount
        /// </summary>
        /// <remarks>
        /// Install a mount on a ship.
        /// <br/>
        /// <br/>In order to install a mount, the ship must be docked and located in a waypoint that has a `Shipyard` trait. The ship also must have the mount to install in its cargo hold.
        /// <br/>
        /// <br/>An installation fee will be deduced by the Shipyard for installing the mount on the ship.
        /// </remarks>
        /// <param name="shipSymbol">The ship's symbol.</param>
        /// <returns>Successfully installed the mount.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response50> InstallMountAsync(Body15 body, string shipSymbol)
        {
            return InstallMountAsync(body, shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Install Mount
        /// </summary>
        /// <remarks>
        /// Install a mount on a ship.
        /// <br/>
        /// <br/>In order to install a mount, the ship must be docked and located in a waypoint that has a `Shipyard` trait. The ship also must have the mount to install in its cargo hold.
        /// <br/>
        /// <br/>An installation fee will be deduced by the Shipyard for installing the mount on the ship.
        /// </remarks>
        /// <param name="shipSymbol">The ship's symbol.</param>
        /// <returns>Successfully installed the mount.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response50> InstallMountAsync(Body15 body, string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/mounts/install"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/mounts/install");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response50>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove Mount
        /// </summary>
        /// <remarks>
        /// Remove a mount from a ship.
        /// <br/>
        /// <br/>The ship must be docked in a waypoint that has the `Shipyard` trait, and must have the desired mount that it wish to remove installed.
        /// <br/>
        /// <br/>A removal fee will be deduced from the agent by the Shipyard.
        /// </remarks>
        /// <param name="shipSymbol">The ship's symbol.</param>
        /// <returns>Successfully removed the mount.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response51> RemoveMountAsync(Body16 body, string shipSymbol)
        {
            return RemoveMountAsync(body, shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove Mount
        /// </summary>
        /// <remarks>
        /// Remove a mount from a ship.
        /// <br/>
        /// <br/>The ship must be docked in a waypoint that has the `Shipyard` trait, and must have the desired mount that it wish to remove installed.
        /// <br/>
        /// <br/>A removal fee will be deduced from the agent by the Shipyard.
        /// </remarks>
        /// <param name="shipSymbol">The ship's symbol.</param>
        /// <returns>Successfully removed the mount.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response51> RemoveMountAsync(Body16 body, string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/mounts/remove"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/mounts/remove");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response51>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Scrap Ship
        /// </summary>
        /// <remarks>
        /// Get the amount of value that will be returned when scrapping a ship.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Successfully retrieved the amount of value that will be returned when scrapping a ship.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response52> GetScrapShipAsync(string shipSymbol)
        {
            return GetScrapShipAsync(shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Scrap Ship
        /// </summary>
        /// <remarks>
        /// Get the amount of value that will be returned when scrapping a ship.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Successfully retrieved the amount of value that will be returned when scrapping a ship.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response52> GetScrapShipAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/scrap"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scrap");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response52>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Scrap Ship
        /// </summary>
        /// <remarks>
        /// Scrap a ship, removing it from the game and returning a portion of the ship's value to the agent. The ship must be docked in a waypoint that has the `Shipyard` trait in order to use this function. To preview the amount of value that will be returned, use the Get Ship action.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Ship scrapped successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response53> ScrapShipAsync(string shipSymbol)
        {
            return ScrapShipAsync(shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Scrap Ship
        /// </summary>
        /// <remarks>
        /// Scrap a ship, removing it from the game and returning a portion of the ship's value to the agent. The ship must be docked in a waypoint that has the `Shipyard` trait in order to use this function. To preview the amount of value that will be returned, use the Get Ship action.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Ship scrapped successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response53> ScrapShipAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/scrap"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/scrap");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response53>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Repair Ship
        /// </summary>
        /// <remarks>
        /// Get the cost of repairing a ship.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Successfully retrieved the cost of repairing a ship.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response54> GetRepairShipAsync(string shipSymbol)
        {
            return GetRepairShipAsync(shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Repair Ship
        /// </summary>
        /// <remarks>
        /// Get the cost of repairing a ship.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Successfully retrieved the cost of repairing a ship.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response54> GetRepairShipAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/repair"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/repair");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response54>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Repair Ship
        /// </summary>
        /// <remarks>
        /// Repair a ship, restoring the ship to maximum condition. The ship must be docked at a waypoint that has the `Shipyard` trait in order to use this function. To preview the cost of repairing the ship, use the Get action.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Ship repaired successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response55> RepairShipAsync(string shipSymbol)
        {
            return RepairShipAsync(shipSymbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Repair Ship
        /// </summary>
        /// <remarks>
        /// Repair a ship, restoring the ship to maximum condition. The ship must be docked at a waypoint that has the `Shipyard` trait in order to use this function. To preview the cost of repairing the ship, use the Get action.
        /// </remarks>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>Ship repaired successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response55> RepairShipAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken)
        {
            if (shipSymbol == null)
                throw new System.ArgumentNullException("shipSymbol");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "my/ships/{shipSymbol}/repair"
                    urlBuilder_.Append("my/ships/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipSymbol, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/repair");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response55>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// The symbol of the faction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Json
    {

        [System.Runtime.Serialization.EnumMember(Value = @"COSMIC")]
        COSMIC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VOID")]
        VOID = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"GALACTIC")]
        GALACTIC = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"QUANTUM")]
        QUANTUM = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DOMINION")]
        DOMINION = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ASTRO")]
        ASTRO = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CORSAIRS")]
        CORSAIRS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OBSIDIAN")]
        OBSIDIAN = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AEGIS")]
        AEGIS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UNITED")]
        UNITED = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"SOLITARY")]
        SOLITARY = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"COBALT")]
        COBALT = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"OMEGA")]
        OMEGA = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ECHO")]
        ECHO = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"LORDS")]
        LORDS = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"CULT")]
        CULT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"ANCIENTS")]
        ANCIENTS = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SHADOW")]
        SHADOW = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ETHEREAL")]
        ETHEREAL = 18,

    }

    /// <summary>
    /// Agent details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class json
    {
        /// <summary>
        /// Account ID that is tied to this agent. Only included on your own agent.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string AccountId { get; set; }

        /// <summary>
        /// Symbol of the agent.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(14, MinimumLength = 3)]
        public string Symbol { get; set; }

        /// <summary>
        /// The headquarters of the agent.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("headquarters")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Headquarters { get; set; }

        /// <summary>
        /// The number of credits the agent has available. Credits can be negative if funds have been overdrawn.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("credits")]
        public long Credits { get; set; }

        /// <summary>
        /// The faction the agent started with.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("startingFaction")]
        [System.ComponentModel.DataAnnotations.Required]
        public string StartingFaction { get; set; }

        /// <summary>
        /// How many ships are owned by the agent.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipCount")]
        public int ShipCount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Payments for the contract.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json2
    {
        /// <summary>
        /// The amount of credits received up front for accepting the contract.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("onAccepted")]
        public int OnAccepted { get; set; }

        /// <summary>
        /// The amount of credits received when the contract is fulfilled.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("onFulfilled")]
        public int OnFulfilled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The details of a delivery contract. Includes the type of good, units needed, and the destination.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json3
    {
        /// <summary>
        /// The symbol of the trade good to deliver.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tradeSymbol")]
        [System.ComponentModel.DataAnnotations.Required]
        public string TradeSymbol { get; set; }

        /// <summary>
        /// The destination where goods need to be delivered.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("destinationSymbol")]
        [System.ComponentModel.DataAnnotations.Required]
        public string DestinationSymbol { get; set; }

        /// <summary>
        /// The number of units that need to be delivered on this contract.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("unitsRequired")]
        public int UnitsRequired { get; set; }

        /// <summary>
        /// The number of units fulfilled on this contract.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("unitsFulfilled")]
        public int UnitsFulfilled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The terms to fulfill the contract.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json4
    {
        /// <summary>
        /// The deadline for the contract.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deadline")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Deadline { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("payment")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json2 Payment { get; set; } = new Json2();

        /// <summary>
        /// The cargo that needs to be delivered to fulfill the contract.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deliver")]
        public System.Collections.Generic.ICollection<Json3> Deliver { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contract details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json5
    {
        /// <summary>
        /// ID of the contract.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Id { get; set; }

        /// <summary>
        /// The symbol of the faction that this contract is for.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("factionSymbol")]
        [System.ComponentModel.DataAnnotations.Required]
        public string FactionSymbol { get; set; }

        /// <summary>
        /// Type of contract.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json5Type Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("terms")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json4 Terms { get; set; } = new Json4();

        /// <summary>
        /// Whether the contract has been accepted by the agent
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accepted")]
        public bool Accepted { get; set; } = false;

        /// <summary>
        /// Whether the contract has been fulfilled
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fulfilled")]
        public bool Fulfilled { get; set; } = false;

        /// <summary>
        /// Deprecated in favor of deadlineToAccept
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("expiration")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Expiration { get; set; }

        /// <summary>
        /// The time at which the contract is no longer available to be accepted
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deadlineToAccept")]
        public System.DateTimeOffset DeadlineToAccept { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The unique identifier of the trait.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Json6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BUREAUCRATIC")]
        BUREAUCRATIC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SECRETIVE")]
        SECRETIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CAPITALISTIC")]
        CAPITALISTIC = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INDUSTRIOUS")]
        INDUSTRIOUS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PEACEFUL")]
        PEACEFUL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DISTRUSTFUL")]
        DISTRUSTFUL = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"WELCOMING")]
        WELCOMING = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SMUGGLERS")]
        SMUGGLERS = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"SCAVENGERS")]
        SCAVENGERS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"REBELLIOUS")]
        REBELLIOUS = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"EXILES")]
        EXILES = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PIRATES")]
        PIRATES = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"RAIDERS")]
        RAIDERS = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"CLAN")]
        CLAN = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"GUILD")]
        GUILD = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"DOMINION")]
        DOMINION = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FRINGE")]
        FRINGE = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"FORSAKEN")]
        FORSAKEN = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ISOLATED")]
        ISOLATED = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"LOCALIZED")]
        LOCALIZED = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"ESTABLISHED")]
        ESTABLISHED = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"NOTABLE")]
        NOTABLE = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"DOMINANT")]
        DOMINANT = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"INESCAPABLE")]
        INESCAPABLE = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"INNOVATIVE")]
        INNOVATIVE = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"BOLD")]
        BOLD = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"VISIONARY")]
        VISIONARY = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"CURIOUS")]
        CURIOUS = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"DARING")]
        DARING = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPLORATORY")]
        EXPLORATORY = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"RESOURCEFUL")]
        RESOURCEFUL = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"FLEXIBLE")]
        FLEXIBLE = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"COOPERATIVE")]
        COOPERATIVE = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"UNITED")]
        UNITED = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"STRATEGIC")]
        STRATEGIC = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"INTELLIGENT")]
        INTELLIGENT = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"RESEARCH_FOCUSED")]
        RESEARCH_FOCUSED = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"COLLABORATIVE")]
        COLLABORATIVE = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"PROGRESSIVE")]
        PROGRESSIVE = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"MILITARISTIC")]
        MILITARISTIC = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"TECHNOLOGICALLY_ADVANCED")]
        TECHNOLOGICALLY_ADVANCED = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"AGGRESSIVE")]
        AGGRESSIVE = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"IMPERIALISTIC")]
        IMPERIALISTIC = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"TREASURE_HUNTERS")]
        TREASURE_HUNTERS = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"DEXTEROUS")]
        DEXTEROUS = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"UNPREDICTABLE")]
        UNPREDICTABLE = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"BRUTAL")]
        BRUTAL = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"FLEETING")]
        FLEETING = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"ADAPTABLE")]
        ADAPTABLE = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"SELF_SUFFICIENT")]
        SELF_SUFFICIENT = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"DEFENSIVE")]
        DEFENSIVE = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"PROUD")]
        PROUD = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"DIVERSE")]
        DIVERSE = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"INDEPENDENT")]
        INDEPENDENT = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"SELF_INTERESTED")]
        SELF_INTERESTED = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAGMENTED")]
        FRAGMENTED = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMERCIAL")]
        COMMERCIAL = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"FREE_MARKETS")]
        FREE_MARKETS = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"ENTREPRENEURIAL")]
        ENTREPRENEURIAL = 58,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json7
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json6 Symbol { get; set; }

        /// <summary>
        /// The name of the trait.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// A description of the trait.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Faction details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json8
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json Symbol { get; set; }

        /// <summary>
        /// Name of the faction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        /// <summary>
        /// Description of the faction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Description { get; set; }

        /// <summary>
        /// The waypoint in which the faction's HQ is located in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("headquarters")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Headquarters { get; set; }

        /// <summary>
        /// List of traits that define this faction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("traits")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json7> Traits { get; set; } = new System.Collections.ObjectModel.Collection<Json7>();

        /// <summary>
        /// Whether or not the faction is currently recruiting new agents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isRecruiting")]
        public bool IsRecruiting { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The registered role of the ship
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Json9
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FABRICATOR")]
        FABRICATOR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HARVESTER")]
        HARVESTER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HAULER")]
        HAULER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INTERCEPTOR")]
        INTERCEPTOR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EXCAVATOR")]
        EXCAVATOR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSPORT")]
        TRANSPORT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"REPAIR")]
        REPAIR = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SURVEYOR")]
        SURVEYOR = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMAND")]
        COMMAND = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CARRIER")]
        CARRIER = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PATROL")]
        PATROL = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SATELLITE")]
        SATELLITE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPLORER")]
        EXPLORER = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"REFINERY")]
        REFINERY = 13,

    }

    /// <summary>
    /// The public registration information of the ship
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json10
    {
        /// <summary>
        /// The agent's registered name of the ship
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        /// <summary>
        /// The symbol of the faction the ship is registered with
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("factionSymbol")]
        [System.ComponentModel.DataAnnotations.Required]
        public string FactionSymbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("role")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json9 Role { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The type of waypoint.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Json13
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PLANET")]
        PLANET = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GAS_GIANT")]
        GAS_GIANT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MOON")]
        MOON = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ORBITAL_STATION")]
        ORBITAL_STATION = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"JUMP_GATE")]
        JUMP_GATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ASTEROID_FIELD")]
        ASTEROID_FIELD = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ASTEROID")]
        ASTEROID = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ENGINEERED_ASTEROID")]
        ENGINEERED_ASTEROID = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ASTEROID_BASE")]
        ASTEROID_BASE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"NEBULA")]
        NEBULA = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"DEBRIS_FIELD")]
        DEBRIS_FIELD = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"GRAVITY_WELL")]
        GRAVITY_WELL = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ARTIFICIAL_GRAVITY_WELL")]
        ARTIFICIAL_GRAVITY_WELL = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FUEL_STATION")]
        FUEL_STATION = 13,

    }

    /// <summary>
    /// The destination or departure of a ships nav route.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json14
    {
        /// <summary>
        /// The symbol of the waypoint.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json13 Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("systemSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string SystemSymbol { get; set; }

        /// <summary>
        /// Position in the universe in the x axis.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("x")]
        public int X { get; set; }

        /// <summary>
        /// Position in the universe in the y axis.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("y")]
        public int Y { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The routing information for the ship's most recent transit or current location.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json15
    {

        [System.Text.Json.Serialization.JsonPropertyName("destination")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json14 Destination { get; set; } = new Json14();

        [System.Text.Json.Serialization.JsonPropertyName("origin")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json14 Origin { get; set; } = new Json14();

        /// <summary>
        /// The date time of the ship's departure.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("departureTime")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DepartureTime { get; set; }

        /// <summary>
        /// The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("arrival")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Arrival { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The current status of the ship
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Json16
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IN_TRANSIT")]
        IN_TRANSIT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_ORBIT")]
        IN_ORBIT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DOCKED")]
        DOCKED = 2,

    }

    /// <summary>
    /// The ship's set speed when traveling between waypoints or systems.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Json17
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DRIFT")]
        DRIFT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"STEALTH")]
        STEALTH = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CRUISE")]
        CRUISE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BURN")]
        BURN = 3,

    }

    /// <summary>
    /// The navigation information of the ship.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json18
    {

        [System.Text.Json.Serialization.JsonPropertyName("systemSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string SystemSymbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("waypointSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string WaypointSymbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("route")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json15 Route { get; set; } = new Json15();

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json16 Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flightMode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json17 FlightMode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The ship's crew service and maintain the ship's systems and equipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json19
    {
        /// <summary>
        /// The current number of crew members on the ship.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("current")]
        public int Current { get; set; }

        /// <summary>
        /// The minimum number of crew members required to maintain the ship.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("required")]
        public int Required { get; set; }

        /// <summary>
        /// The maximum number of crew members the ship can support.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("capacity")]
        public int Capacity { get; set; }

        /// <summary>
        /// The rotation of crew shifts. A stricter shift improves the ship's performance. A more relaxed shift improves the crew's morale.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rotation")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json19Rotation Rotation { get; set; } = Jago.Generator.Json19Rotation.STRICT;

        /// <summary>
        /// A rough measure of the crew's morale. A higher morale means the crew is happier and more productive. A lower morale means the ship is more prone to accidents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("morale")]
        [System.ComponentModel.DataAnnotations.Range(0, 100)]
        public int Morale { get; set; }

        /// <summary>
        /// The amount of credits per crew member paid per hour. Wages are paid when a ship docks at a civilized waypoint.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wages")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Wages { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The requirements for installation on a ship
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json22
    {
        /// <summary>
        /// The amount of power required from the reactor.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("power")]
        public int Power { get; set; }

        /// <summary>
        /// The number of crew required for operation.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("crew")]
        public int Crew { get; set; }

        /// <summary>
        /// The number of module slots required for installation.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("slots")]
        public int Slots { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json23
    {
        /// <summary>
        /// Symbol of the frame.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json23Symbol Symbol { get; set; }

        /// <summary>
        /// Name of the frame.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Description of the frame.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("condition")]
        [System.ComponentModel.DataAnnotations.Range(0D, 1D)]
        public double Condition { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("integrity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 1D)]
        public double Integrity { get; set; }

        /// <summary>
        /// The amount of slots that can be dedicated to modules installed in the ship. Each installed module take up a number of slots, and once there are no more slots, no new modules can be installed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("moduleSlots")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int ModuleSlots { get; set; }

        /// <summary>
        /// The amount of slots that can be dedicated to mounts installed in the ship. Each installed mount takes up a number of points, and once there are no more points remaining, no new mounts can be installed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mountingPoints")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int MountingPoints { get; set; }

        /// <summary>
        /// The maximum amount of fuel that can be stored in this ship. When refueling, the ship will be refueled to this amount.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fuelCapacity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int FuelCapacity { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("requirements")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json22 Requirements { get; set; } = new Json22();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json24
    {
        /// <summary>
        /// Symbol of the reactor.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json24Symbol Symbol { get; set; }

        /// <summary>
        /// Name of the reactor.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Description of the reactor.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("condition")]
        [System.ComponentModel.DataAnnotations.Range(0D, 1D)]
        public double Condition { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("integrity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 1D)]
        public double Integrity { get; set; }

        /// <summary>
        /// The amount of power provided by this reactor. The more power a reactor provides to the ship, the lower the cooldown it gets when using a module or mount that taxes the ship's power.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("powerOutput")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int PowerOutput { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("requirements")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json22 Requirements { get; set; } = new Json22();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The engine determines how quickly a ship travels between waypoints.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json25
    {
        /// <summary>
        /// The symbol of the engine.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json25Symbol Symbol { get; set; }

        /// <summary>
        /// The name of the engine.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The description of the engine.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("condition")]
        [System.ComponentModel.DataAnnotations.Range(0D, 1D)]
        public double Condition { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("integrity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 1D)]
        public double Integrity { get; set; }

        /// <summary>
        /// The speed stat of this engine. The higher the speed, the faster a ship can travel from one point to another. Reduces the time of arrival when navigating the ship.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("speed")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Speed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("requirements")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json22 Requirements { get; set; } = new Json22();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A cooldown is a period of time in which a ship cannot perform certain actions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json26
    {
        /// <summary>
        /// The symbol of the ship that is on cooldown
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipSymbol")]
        [System.ComponentModel.DataAnnotations.Required]
        public string ShipSymbol { get; set; }

        /// <summary>
        /// The total duration of the cooldown in seconds
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalSeconds")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int TotalSeconds { get; set; }

        /// <summary>
        /// The remaining duration of the cooldown in seconds
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("remainingSeconds")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int RemainingSeconds { get; set; }

        /// <summary>
        /// The date and time when the cooldown expires in ISO 8601 format
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("expiration")]
        public System.DateTimeOffset Expiration { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A module can be installed in a ship and provides a set of capabilities such as storage space or quarters for crew. Module installations are permanent.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json27
    {
        /// <summary>
        /// The symbol of the module.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json27Symbol Symbol { get; set; }

        /// <summary>
        /// Modules that provide capacity, such as cargo hold or crew quarters will show this value to denote how much of a bonus the module grants.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("capacity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Capacity { get; set; }

        /// <summary>
        /// Modules that have a range will such as a sensor array show this value to denote how far can the module reach with its capabilities.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("range")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Range { get; set; }

        /// <summary>
        /// Name of this module.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Description of this module.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("requirements")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json22 Requirements { get; set; } = new Json22();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A mount is installed on the exterier of a ship.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json28
    {
        /// <summary>
        /// Symbo of this mount.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json28Symbol Symbol { get; set; }

        /// <summary>
        /// Name of this mount.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Description of this mount.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("strength")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Strength { get; set; }

        /// <summary>
        /// Mounts that have this value denote what goods can be produced from using the mount.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposits")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<Deposits> Deposits { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("requirements")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json22 Requirements { get; set; } = new Json22();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The good's symbol.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Json29
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PRECIOUS_STONES")]
        PRECIOUS_STONES = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"QUARTZ_SAND")]
        QUARTZ_SAND = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SILICON_CRYSTALS")]
        SILICON_CRYSTALS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AMMONIA_ICE")]
        AMMONIA_ICE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"LIQUID_HYDROGEN")]
        LIQUID_HYDROGEN = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"LIQUID_NITROGEN")]
        LIQUID_NITROGEN = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ICE_WATER")]
        ICE_WATER = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"EXOTIC_MATTER")]
        EXOTIC_MATTER = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVANCED_CIRCUITRY")]
        ADVANCED_CIRCUITRY = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"GRAVITON_EMITTERS")]
        GRAVITON_EMITTERS = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"IRON")]
        IRON = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"IRON_ORE")]
        IRON_ORE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"COPPER")]
        COPPER = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"COPPER_ORE")]
        COPPER_ORE = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ALUMINUM")]
        ALUMINUM = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ALUMINUM_ORE")]
        ALUMINUM_ORE = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SILVER")]
        SILVER = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SILVER_ORE")]
        SILVER_ORE = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"GOLD")]
        GOLD = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"GOLD_ORE")]
        GOLD_ORE = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"PLATINUM")]
        PLATINUM = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"PLATINUM_ORE")]
        PLATINUM_ORE = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"DIAMONDS")]
        DIAMONDS = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"URANITE")]
        URANITE = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"URANITE_ORE")]
        URANITE_ORE = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"MERITIUM")]
        MERITIUM = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"MERITIUM_ORE")]
        MERITIUM_ORE = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"HYDROCARBON")]
        HYDROCARBON = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"ANTIMATTER")]
        ANTIMATTER = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"FAB_MATS")]
        FAB_MATS = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"FERTILIZERS")]
        FERTILIZERS = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"FABRICS")]
        FABRICS = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"FOOD")]
        FOOD = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"JEWELRY")]
        JEWELRY = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"MACHINERY")]
        MACHINERY = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"FIREARMS")]
        FIREARMS = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"ASSAULT_RIFLES")]
        ASSAULT_RIFLES = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"MILITARY_EQUIPMENT")]
        MILITARY_EQUIPMENT = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPLOSIVES")]
        EXPLOSIVES = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"LAB_INSTRUMENTS")]
        LAB_INSTRUMENTS = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"AMMUNITION")]
        AMMUNITION = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"ELECTRONICS")]
        ELECTRONICS = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_PLATING")]
        SHIP_PLATING = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_PARTS")]
        SHIP_PARTS = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"EQUIPMENT")]
        EQUIPMENT = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"FUEL")]
        FUEL = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"MEDICINE")]
        MEDICINE = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"DRUGS")]
        DRUGS = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"CLOTHING")]
        CLOTHING = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"MICROPROCESSORS")]
        MICROPROCESSORS = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"PLASTICS")]
        PLASTICS = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"POLYNUCLEOTIDES")]
        POLYNUCLEOTIDES = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"BIOCOMPOSITES")]
        BIOCOMPOSITES = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"QUANTUM_STABILIZERS")]
        QUANTUM_STABILIZERS = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"NANOBOTS")]
        NANOBOTS = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"AI_MAINFRAMES")]
        AI_MAINFRAMES = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"QUANTUM_DRIVES")]
        QUANTUM_DRIVES = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"ROBOTIC_DRONES")]
        ROBOTIC_DRONES = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"CYBER_IMPLANTS")]
        CYBER_IMPLANTS = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"GENE_THERAPEUTICS")]
        GENE_THERAPEUTICS = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"NEURAL_CHIPS")]
        NEURAL_CHIPS = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"MOOD_REGULATORS")]
        MOOD_REGULATORS = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"VIRAL_AGENTS")]
        VIRAL_AGENTS = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"MICRO_FUSION_GENERATORS")]
        MICRO_FUSION_GENERATORS = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPERGRAINS")]
        SUPERGRAINS = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"LASER_RIFLES")]
        LASER_RIFLES = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"HOLOGRAPHICS")]
        HOLOGRAPHICS = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_SALVAGE")]
        SHIP_SALVAGE = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"RELIC_TECH")]
        RELIC_TECH = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"NOVEL_LIFEFORMS")]
        NOVEL_LIFEFORMS = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"BOTANICAL_SPECIMENS")]
        BOTANICAL_SPECIMENS = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"CULTURAL_ARTIFACTS")]
        CULTURAL_ARTIFACTS = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_PROBE")]
        FRAME_PROBE = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_DRONE")]
        FRAME_DRONE = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_INTERCEPTOR")]
        FRAME_INTERCEPTOR = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_RACER")]
        FRAME_RACER = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_FIGHTER")]
        FRAME_FIGHTER = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_FRIGATE")]
        FRAME_FRIGATE = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_SHUTTLE")]
        FRAME_SHUTTLE = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_EXPLORER")]
        FRAME_EXPLORER = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_MINER")]
        FRAME_MINER = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_LIGHT_FREIGHTER")]
        FRAME_LIGHT_FREIGHTER = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_HEAVY_FREIGHTER")]
        FRAME_HEAVY_FREIGHTER = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_TRANSPORT")]
        FRAME_TRANSPORT = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_DESTROYER")]
        FRAME_DESTROYER = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_CRUISER")]
        FRAME_CRUISER = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_CARRIER")]
        FRAME_CARRIER = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"REACTOR_SOLAR_I")]
        REACTOR_SOLAR_I = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"REACTOR_FUSION_I")]
        REACTOR_FUSION_I = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"REACTOR_FISSION_I")]
        REACTOR_FISSION_I = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"REACTOR_CHEMICAL_I")]
        REACTOR_CHEMICAL_I = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"REACTOR_ANTIMATTER_I")]
        REACTOR_ANTIMATTER_I = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"ENGINE_IMPULSE_DRIVE_I")]
        ENGINE_IMPULSE_DRIVE_I = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"ENGINE_ION_DRIVE_I")]
        ENGINE_ION_DRIVE_I = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"ENGINE_ION_DRIVE_II")]
        ENGINE_ION_DRIVE_II = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"ENGINE_HYPER_DRIVE_I")]
        ENGINE_HYPER_DRIVE_I = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_MINERAL_PROCESSOR_I")]
        MODULE_MINERAL_PROCESSOR_I = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_GAS_PROCESSOR_I")]
        MODULE_GAS_PROCESSOR_I = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_CARGO_HOLD_I")]
        MODULE_CARGO_HOLD_I = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_CARGO_HOLD_II")]
        MODULE_CARGO_HOLD_II = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_CARGO_HOLD_III")]
        MODULE_CARGO_HOLD_III = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_CREW_QUARTERS_I")]
        MODULE_CREW_QUARTERS_I = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_ENVOY_QUARTERS_I")]
        MODULE_ENVOY_QUARTERS_I = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_PASSENGER_CABIN_I")]
        MODULE_PASSENGER_CABIN_I = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_MICRO_REFINERY_I")]
        MODULE_MICRO_REFINERY_I = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_SCIENCE_LAB_I")]
        MODULE_SCIENCE_LAB_I = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_JUMP_DRIVE_I")]
        MODULE_JUMP_DRIVE_I = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_JUMP_DRIVE_II")]
        MODULE_JUMP_DRIVE_II = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_JUMP_DRIVE_III")]
        MODULE_JUMP_DRIVE_III = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_WARP_DRIVE_I")]
        MODULE_WARP_DRIVE_I = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_WARP_DRIVE_II")]
        MODULE_WARP_DRIVE_II = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_WARP_DRIVE_III")]
        MODULE_WARP_DRIVE_III = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_SHIELD_GENERATOR_I")]
        MODULE_SHIELD_GENERATOR_I = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_SHIELD_GENERATOR_II")]
        MODULE_SHIELD_GENERATOR_II = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_ORE_REFINERY_I")]
        MODULE_ORE_REFINERY_I = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_FUEL_REFINERY_I")]
        MODULE_FUEL_REFINERY_I = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_GAS_SIPHON_I")]
        MOUNT_GAS_SIPHON_I = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_GAS_SIPHON_II")]
        MOUNT_GAS_SIPHON_II = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_GAS_SIPHON_III")]
        MOUNT_GAS_SIPHON_III = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_SURVEYOR_I")]
        MOUNT_SURVEYOR_I = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_SURVEYOR_II")]
        MOUNT_SURVEYOR_II = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_SURVEYOR_III")]
        MOUNT_SURVEYOR_III = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_SENSOR_ARRAY_I")]
        MOUNT_SENSOR_ARRAY_I = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_SENSOR_ARRAY_II")]
        MOUNT_SENSOR_ARRAY_II = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_SENSOR_ARRAY_III")]
        MOUNT_SENSOR_ARRAY_III = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_MINING_LASER_I")]
        MOUNT_MINING_LASER_I = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_MINING_LASER_II")]
        MOUNT_MINING_LASER_II = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_MINING_LASER_III")]
        MOUNT_MINING_LASER_III = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_LASER_CANNON_I")]
        MOUNT_LASER_CANNON_I = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_MISSILE_LAUNCHER_I")]
        MOUNT_MISSILE_LAUNCHER_I = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_TURRET_I")]
        MOUNT_TURRET_I = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_PROBE")]
        SHIP_PROBE = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_MINING_DRONE")]
        SHIP_MINING_DRONE = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_SIPHON_DRONE")]
        SHIP_SIPHON_DRONE = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_INTERCEPTOR")]
        SHIP_INTERCEPTOR = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_LIGHT_HAULER")]
        SHIP_LIGHT_HAULER = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_COMMAND_FRIGATE")]
        SHIP_COMMAND_FRIGATE = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_EXPLORER")]
        SHIP_EXPLORER = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_HEAVY_FREIGHTER")]
        SHIP_HEAVY_FREIGHTER = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_LIGHT_SHUTTLE")]
        SHIP_LIGHT_SHUTTLE = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_ORE_HOUND")]
        SHIP_ORE_HOUND = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_REFINING_FREIGHTER")]
        SHIP_REFINING_FREIGHTER = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_SURVEYOR")]
        SHIP_SURVEYOR = 142,

    }

    /// <summary>
    /// The type of cargo item and the number of units.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json30
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json29 Symbol { get; set; }

        /// <summary>
        /// The name of the cargo item type.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The description of the cargo item type.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>
        /// The number of units of the cargo item.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("units")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Units { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Ship cargo details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json31
    {
        /// <summary>
        /// The max number of items that can be stored in the cargo hold.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("capacity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Capacity { get; set; }

        /// <summary>
        /// The number of items currently stored in the cargo hold.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("units")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Units { get; set; }

        /// <summary>
        /// The items currently in the cargo hold.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inventory")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json30> Inventory { get; set; } = new System.Collections.ObjectModel.Collection<Json30>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json32
    {
        /// <summary>
        /// The current amount of fuel in the ship's tanks.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("current")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Current { get; set; }

        /// <summary>
        /// The maximum amount of fuel the ship's tanks can hold.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("capacity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Capacity { get; set; }

        /// <summary>
        /// An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("consumed")]
        public Consumed Consumed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Ship details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json33
    {
        /// <summary>
        /// The globally unique identifier of the ship in the following format: `[AGENT_SYMBOL]-[HEX_ID]`
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("registration")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json10 Registration { get; set; } = new Json10();

        [System.Text.Json.Serialization.JsonPropertyName("nav")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json18 Nav { get; set; } = new Json18();

        [System.Text.Json.Serialization.JsonPropertyName("crew")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json19 Crew { get; set; } = new Json19();

        [System.Text.Json.Serialization.JsonPropertyName("frame")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json23 Frame { get; set; } = new Json23();

        [System.Text.Json.Serialization.JsonPropertyName("reactor")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json24 Reactor { get; set; } = new Json24();

        [System.Text.Json.Serialization.JsonPropertyName("engine")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json25 Engine { get; set; } = new Json25();

        [System.Text.Json.Serialization.JsonPropertyName("cooldown")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json26 Cooldown { get; set; } = new Json26();

        /// <summary>
        /// Modules installed in this ship.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("modules")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json27> Modules { get; set; } = new System.Collections.ObjectModel.Collection<Json27>();

        /// <summary>
        /// Mounts installed in this ship.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mounts")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json28> Mounts { get; set; } = new System.Collections.ObjectModel.Collection<Json28>();

        [System.Text.Json.Serialization.JsonPropertyName("cargo")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json31 Cargo { get; set; } = new Json31();

        [System.Text.Json.Serialization.JsonPropertyName("fuel")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json32 Fuel { get; set; } = new Json32();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The type of system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Json34
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NEUTRON_STAR")]
        NEUTRON_STAR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RED_STAR")]
        RED_STAR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ORANGE_STAR")]
        ORANGE_STAR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BLUE_STAR")]
        BLUE_STAR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"YOUNG_STAR")]
        YOUNG_STAR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"WHITE_DWARF")]
        WHITE_DWARF = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"BLACK_HOLE")]
        BLACK_HOLE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"HYPERGIANT")]
        HYPERGIANT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NEBULA")]
        NEBULA = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UNSTABLE")]
        UNSTABLE = 9,

    }

    /// <summary>
    /// An orbital is another waypoint that orbits a parent waypoint.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json35
    {
        /// <summary>
        /// The symbol of the orbiting waypoint.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Symbol { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json36
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json13 Type { get; set; }

        /// <summary>
        /// Relative position of the waypoint on the system's x axis. This is not an absolute position in the universe.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("x")]
        public int X { get; set; }

        /// <summary>
        /// Relative position of the waypoint on the system's y axis. This is not an absolute position in the universe.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("y")]
        public int Y { get; set; }

        /// <summary>
        /// Waypoints that orbit this waypoint.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("orbitals")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json35> Orbitals { get; set; } = new System.Collections.ObjectModel.Collection<Json35>();

        /// <summary>
        /// The symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise this value is undefined.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("orbits")]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Orbits { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json37
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json Symbol { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json38
    {
        /// <summary>
        /// The symbol of the system.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Symbol { get; set; }

        /// <summary>
        /// The symbol of the sector.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sectorSymbol")]
        [System.ComponentModel.DataAnnotations.Required]
        public string SectorSymbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json34 Type { get; set; }

        /// <summary>
        /// Relative position of the system in the sector in the x axis.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("x")]
        public int X { get; set; }

        /// <summary>
        /// Relative position of the system in the sector in the y axis.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("y")]
        public int Y { get; set; }

        /// <summary>
        /// Waypoints in this system.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("waypoints")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json36> Waypoints { get; set; } = new System.Collections.ObjectModel.Collection<Json36>();

        /// <summary>
        /// Factions that control this system.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("factions")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json37> Factions { get; set; } = new System.Collections.ObjectModel.Collection<Json37>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Meta details for pagination.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json39
    {
        /// <summary>
        /// Shows the total amount of items of this kind that exist.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Total { get; set; }

        /// <summary>
        /// A page denotes an amount of items, offset from the first item. Each page holds an amount of items equal to the `limit`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Page { get; set; } = 1;

        /// <summary>
        /// The amount of items in each page. Limits how many items can be fetched at once.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("limit")]
        [System.ComponentModel.DataAnnotations.Range(1, 20)]
        public int Limit { get; set; } = 10;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The unique identifier of the trait.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Json40
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNCHARTED")]
        UNCHARTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UNDER_CONSTRUCTION")]
        UNDER_CONSTRUCTION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MARKETPLACE")]
        MARKETPLACE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPYARD")]
        SHIPYARD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OUTPOST")]
        OUTPOST = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SCATTERED_SETTLEMENTS")]
        SCATTERED_SETTLEMENTS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SPRAWLING_CITIES")]
        SPRAWLING_CITIES = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MEGA_STRUCTURES")]
        MEGA_STRUCTURES = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PIRATE_BASE")]
        PIRATE_BASE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"OVERCROWDED")]
        OVERCROWDED = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"HIGH_TECH")]
        HIGH_TECH = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CORRUPT")]
        CORRUPT = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"BUREAUCRATIC")]
        BUREAUCRATIC = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"TRADING_HUB")]
        TRADING_HUB = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"INDUSTRIAL")]
        INDUSTRIAL = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"BLACK_MARKET")]
        BLACK_MARKET = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"RESEARCH_FACILITY")]
        RESEARCH_FACILITY = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"MILITARY_BASE")]
        MILITARY_BASE = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"SURVEILLANCE_OUTPOST")]
        SURVEILLANCE_OUTPOST = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPLORATION_OUTPOST")]
        EXPLORATION_OUTPOST = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"MINERAL_DEPOSITS")]
        MINERAL_DEPOSITS = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMON_METAL_DEPOSITS")]
        COMMON_METAL_DEPOSITS = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"PRECIOUS_METAL_DEPOSITS")]
        PRECIOUS_METAL_DEPOSITS = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"RARE_METAL_DEPOSITS")]
        RARE_METAL_DEPOSITS = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"METHANE_POOLS")]
        METHANE_POOLS = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ICE_CRYSTALS")]
        ICE_CRYSTALS = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPLOSIVE_GASES")]
        EXPLOSIVE_GASES = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"STRONG_MAGNETOSPHERE")]
        STRONG_MAGNETOSPHERE = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"VIBRANT_AURORAS")]
        VIBRANT_AURORAS = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"SALT_FLATS")]
        SALT_FLATS = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"CANYONS")]
        CANYONS = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"PERPETUAL_DAYLIGHT")]
        PERPETUAL_DAYLIGHT = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"PERPETUAL_OVERCAST")]
        PERPETUAL_OVERCAST = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"DRY_SEABEDS")]
        DRY_SEABEDS = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"MAGMA_SEAS")]
        MAGMA_SEAS = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPERVOLCANOES")]
        SUPERVOLCANOES = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"ASH_CLOUDS")]
        ASH_CLOUDS = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"VAST_RUINS")]
        VAST_RUINS = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"MUTATED_FLORA")]
        MUTATED_FLORA = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"TERRAFORMED")]
        TERRAFORMED = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"EXTREME_TEMPERATURES")]
        EXTREME_TEMPERATURES = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"EXTREME_PRESSURE")]
        EXTREME_PRESSURE = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"DIVERSE_LIFE")]
        DIVERSE_LIFE = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"SCARCE_LIFE")]
        SCARCE_LIFE = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"FOSSILS")]
        FOSSILS = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"WEAK_GRAVITY")]
        WEAK_GRAVITY = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"STRONG_GRAVITY")]
        STRONG_GRAVITY = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"CRUSHING_GRAVITY")]
        CRUSHING_GRAVITY = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"TOXIC_ATMOSPHERE")]
        TOXIC_ATMOSPHERE = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"CORROSIVE_ATMOSPHERE")]
        CORROSIVE_ATMOSPHERE = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"BREATHABLE_ATMOSPHERE")]
        BREATHABLE_ATMOSPHERE = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"THIN_ATMOSPHERE")]
        THIN_ATMOSPHERE = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"JOVIAN")]
        JOVIAN = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"ROCKY")]
        ROCKY = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"VOLCANIC")]
        VOLCANIC = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"FROZEN")]
        FROZEN = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"SWAMP")]
        SWAMP = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"BARREN")]
        BARREN = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"TEMPERATE")]
        TEMPERATE = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"JUNGLE")]
        JUNGLE = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"OCEAN")]
        OCEAN = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"RADIOACTIVE")]
        RADIOACTIVE = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"MICRO_GRAVITY_ANOMALIES")]
        MICRO_GRAVITY_ANOMALIES = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"DEBRIS_CLUSTER")]
        DEBRIS_CLUSTER = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"DEEP_CRATERS")]
        DEEP_CRATERS = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"SHALLOW_CRATERS")]
        SHALLOW_CRATERS = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"UNSTABLE_COMPOSITION")]
        UNSTABLE_COMPOSITION = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"HOLLOWED_INTERIOR")]
        HOLLOWED_INTERIOR = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"STRIPPED")]
        STRIPPED = 68,

    }

    /// <summary>
    /// The faction that controls the waypoint.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json41
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json Symbol { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json42
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json40 Symbol { get; set; }

        /// <summary>
        /// The name of the trait.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// A description of the trait.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The unique identifier of the modifier.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Json43
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STRIPPED")]
        STRIPPED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UNSTABLE")]
        UNSTABLE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RADIATION_LEAK")]
        RADIATION_LEAK = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CRITICAL_LIMIT")]
        CRITICAL_LIMIT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CIVIL_UNREST")]
        CIVIL_UNREST = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json44
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json43 Symbol { get; set; }

        /// <summary>
        /// The name of the trait.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// A description of the trait.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The chart of a system or waypoint, which makes the location visible to other agents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json45
    {

        [System.Text.Json.Serialization.JsonPropertyName("waypointSymbol")]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string WaypointSymbol { get; set; }

        /// <summary>
        /// The agent that submitted the chart for this waypoint.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("submittedBy")]
        public string SubmittedBy { get; set; }

        /// <summary>
        /// The time the chart for this waypoint was submitted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("submittedOn")]
        public System.DateTimeOffset SubmittedOn { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json46
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json13 Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("systemSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string SystemSymbol { get; set; }

        /// <summary>
        /// Relative position of the waypoint on the system's x axis. This is not an absolute position in the universe.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("x")]
        public int X { get; set; }

        /// <summary>
        /// Relative position of the waypoint on the system's y axis. This is not an absolute position in the universe.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("y")]
        public int Y { get; set; }

        /// <summary>
        /// Waypoints that orbit this waypoint.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("orbitals")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json35> Orbitals { get; set; } = new System.Collections.ObjectModel.Collection<Json35>();

        /// <summary>
        /// The symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise this value is undefined.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("orbits")]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Orbits { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("faction")]
        public Json41 Faction { get; set; }

        /// <summary>
        /// The traits of the waypoint.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("traits")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json42> Traits { get; set; } = new System.Collections.ObjectModel.Collection<Json42>();

        /// <summary>
        /// The modifiers of the waypoint.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("modifiers")]
        public System.Collections.Generic.ICollection<Json44> Modifiers { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("chart")]
        public Json45 Chart { get; set; }

        /// <summary>
        /// True if the waypoint is under construction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isUnderConstruction")]
        public bool IsUnderConstruction { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A good that can be traded for other goods or currency.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json47
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json29 Symbol { get; set; }

        /// <summary>
        /// The name of the good.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The description of the good.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Result of a transaction with a market.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json48
    {

        [System.Text.Json.Serialization.JsonPropertyName("waypointSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string WaypointSymbol { get; set; }

        /// <summary>
        /// The symbol of the ship that made the transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipSymbol { get; set; }

        /// <summary>
        /// The symbol of the trade good.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tradeSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TradeSymbol { get; set; }

        /// <summary>
        /// The type of transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json48Type Type { get; set; }

        /// <summary>
        /// The number of units of the transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("units")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Units { get; set; }

        /// <summary>
        /// The price per unit of the transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pricePerUnit")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int PricePerUnit { get; set; }

        /// <summary>
        /// The total price of the transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalPrice")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int TotalPrice { get; set; }

        /// <summary>
        /// The timestamp of the transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The supply level of a trade good.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Json49
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SCARCE")]
        SCARCE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LIMITED")]
        LIMITED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MODERATE")]
        MODERATE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ABUNDANT")]
        ABUNDANT = 4,

    }

    /// <summary>
    /// The activity level of a trade good. If the good is an import, this represents how strong consumption is. If the good is an export, this represents how strong the production is for the good. When activity is strong, consumption or production is near maximum capacity. When activity is weak, consumption or production is near minimum capacity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Json50
    {

        [System.Runtime.Serialization.EnumMember(Value = @"WEAK")]
        WEAK = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GROWING")]
        GROWING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"STRONG")]
        STRONG = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RESTRICTED")]
        RESTRICTED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json51
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json29 Symbol { get; set; }

        /// <summary>
        /// The type of trade good (export, import, or exchange).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json51Type Type { get; set; }

        /// <summary>
        /// This is the maximum number of units that can be purchased or sold at this market in a single trade for this good. Trade volume also gives an indication of price volatility. A market with a low trade volume will have large price swings, while high trade volume will be more resilient to price changes.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tradeVolume")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int TradeVolume { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("supply")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json49 Supply { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("activity")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json50 Activity { get; set; }

        /// <summary>
        /// The price at which this good can be purchased from the market.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("purchasePrice")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int PurchasePrice { get; set; }

        /// <summary>
        /// The price at which this good can be sold to the market.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sellPrice")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int SellPrice { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json52
    {
        /// <summary>
        /// The symbol of the market. The symbol is the same as the waypoint where the market is located.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        /// <summary>
        /// The list of goods that are exported from this market.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("exports")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json47> Exports { get; set; } = new System.Collections.ObjectModel.Collection<Json47>();

        /// <summary>
        /// The list of goods that are sought as imports in this market.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("imports")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json47> Imports { get; set; } = new System.Collections.ObjectModel.Collection<Json47>();

        /// <summary>
        /// The list of goods that are bought and sold between agents at this market.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("exchange")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json47> Exchange { get; set; } = new System.Collections.ObjectModel.Collection<Json47>();

        /// <summary>
        /// The list of recent transactions at this market. Visible only when a ship is present at the market.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<Json48> Transactions { get; set; }

        /// <summary>
        /// The list of goods that are traded at this market. Visible only when a ship is present at the market.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tradeGoods")]
        public System.Collections.Generic.ICollection<Json51> TradeGoods { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Type of ship
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Json53
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_PROBE")]
        SHIP_PROBE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_MINING_DRONE")]
        SHIP_MINING_DRONE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_SIPHON_DRONE")]
        SHIP_SIPHON_DRONE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_INTERCEPTOR")]
        SHIP_INTERCEPTOR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_LIGHT_HAULER")]
        SHIP_LIGHT_HAULER = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_COMMAND_FRIGATE")]
        SHIP_COMMAND_FRIGATE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_EXPLORER")]
        SHIP_EXPLORER = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_HEAVY_FREIGHTER")]
        SHIP_HEAVY_FREIGHTER = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_LIGHT_SHUTTLE")]
        SHIP_LIGHT_SHUTTLE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_ORE_HOUND")]
        SHIP_ORE_HOUND = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_REFINING_FREIGHTER")]
        SHIP_REFINING_FREIGHTER = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIP_SURVEYOR")]
        SHIP_SURVEYOR = 11,

    }

    /// <summary>
    /// Results of a transaction with a shipyard.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json54
    {

        [System.Text.Json.Serialization.JsonPropertyName("waypointSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string WaypointSymbol { get; set; }

        /// <summary>
        /// The symbol of the ship that was the subject of the transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipSymbol { get; set; }

        /// <summary>
        /// The symbol of the ship that was the subject of the transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipType { get; set; }

        /// <summary>
        /// The price of the transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("price")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Price { get; set; }

        /// <summary>
        /// The symbol of the agent that made the transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("agentSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AgentSymbol { get; set; }

        /// <summary>
        /// The timestamp of the transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json55
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json53 Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("supply")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json49 Supply { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("activity")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json50 Activity { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("purchasePrice")]
        public int PurchasePrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("frame")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json23 Frame { get; set; } = new Json23();

        [System.Text.Json.Serialization.JsonPropertyName("reactor")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json24 Reactor { get; set; } = new Json24();

        [System.Text.Json.Serialization.JsonPropertyName("engine")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json25 Engine { get; set; } = new Json25();

        [System.Text.Json.Serialization.JsonPropertyName("modules")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json27> Modules { get; set; } = new System.Collections.ObjectModel.Collection<Json27>();

        [System.Text.Json.Serialization.JsonPropertyName("mounts")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json28> Mounts { get; set; } = new System.Collections.ObjectModel.Collection<Json28>();

        [System.Text.Json.Serialization.JsonPropertyName("crew")]
        [System.ComponentModel.DataAnnotations.Required]
        public Crew Crew { get; set; } = new Crew();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json56
    {
        /// <summary>
        /// The symbol of the shipyard. The symbol is the same as the waypoint where the shipyard is located.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Symbol { get; set; }

        /// <summary>
        /// The list of ship types available for purchase at this shipyard.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipTypes")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ShipTypes> ShipTypes { get; set; } = new System.Collections.ObjectModel.Collection<ShipTypes>();

        /// <summary>
        /// The list of recent transactions at this shipyard.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<Json54> Transactions { get; set; }

        /// <summary>
        /// The ships that are currently available for purchase at the shipyard.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ships")]
        public System.Collections.Generic.ICollection<Json55> Ships { get; set; }

        /// <summary>
        /// The fee to modify a ship at this shipyard. This includes installing or removing modules and mounts on a ship. In the case of mounts, the fee is a flat rate per mount. In the case of modules, the fee is per slot the module occupies.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("modificationsFee")]
        public int ModificationsFee { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json57
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Symbol { get; set; }

        /// <summary>
        /// All the gates that are connected to this waypoint.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connections")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Connections { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The details of the required construction materials for a given waypoint under construction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json58
    {

        [System.Text.Json.Serialization.JsonPropertyName("tradeSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json29 TradeSymbol { get; set; }

        /// <summary>
        /// The number of units required.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("required")]
        public int Required { get; set; }

        /// <summary>
        /// The number of units fulfilled toward the required amount.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fulfilled")]
        public int Fulfilled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The construction details of a waypoint.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json59
    {
        /// <summary>
        /// The symbol of the waypoint.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        /// <summary>
        /// The materials required to construct the waypoint.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("materials")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json58> Materials { get; set; } = new System.Collections.ObjectModel.Collection<Json58>();

        /// <summary>
        /// Whether the waypoint has been constructed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isComplete")]
        public bool IsComplete { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A surveyed deposit of a mineral or resource available for extraction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json60
    {
        /// <summary>
        /// The symbol of the deposit.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A resource survey of a waypoint, detailing a specific extraction location and the types of resources that can be found there.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json61
    {
        /// <summary>
        /// A unique signature for the location of this survey. This signature is verified when attempting an extraction using this survey.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("signature")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Signature { get; set; }

        /// <summary>
        /// The symbol of the waypoint that this survey is for.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Symbol { get; set; }

        /// <summary>
        /// A list of deposits that can be found at this location. A ship will extract one of these deposits when using this survey in an extraction request. If multiple deposits of the same type are present, the chance of extracting that deposit is increased.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposits")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json60> Deposits { get; set; } = new System.Collections.ObjectModel.Collection<Json60>();

        /// <summary>
        /// The date and time when the survey expires. After this date and time, the survey will no longer be available for extraction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("expiration")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Expiration { get; set; }

        /// <summary>
        /// The size of the deposit. This value indicates how much can be extracted from the survey before it is exhausted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("size")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json61Size Size { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A yield from the extraction operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json62
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json29 Symbol { get; set; }

        /// <summary>
        /// The number of units extracted that were placed into the ship's cargo hold.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("units")]
        public int Units { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Extraction details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json63
    {
        /// <summary>
        /// Symbol of the ship that executed the extraction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipSymbol")]
        [System.ComponentModel.DataAnnotations.Required]
        public string ShipSymbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yield")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json62 Yield { get; set; } = new Json62();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An event that represents damage or wear to a ship's reactor, frame, or engine, reducing the condition of the ship.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json64
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json64Symbol Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("component")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json64Component Component { get; set; }

        /// <summary>
        /// The name of the event.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// A description of the event.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A yield from the siphon operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json65
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json29 Symbol { get; set; }

        /// <summary>
        /// The number of units siphoned that were placed into the ship's cargo hold.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("units")]
        public int Units { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Siphon details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json66
    {
        /// <summary>
        /// Symbol of the ship that executed the siphon.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipSymbol")]
        [System.ComponentModel.DataAnnotations.Required]
        public string ShipSymbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yield")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json65 Yield { get; set; } = new Json65();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of a system was that scanned.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json67
    {
        /// <summary>
        /// Symbol of the system.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Symbol { get; set; }

        /// <summary>
        /// Symbol of the system's sector.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sectorSymbol")]
        [System.ComponentModel.DataAnnotations.Required]
        public string SectorSymbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json34 Type { get; set; }

        /// <summary>
        /// Position in the universe in the x axis.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("x")]
        public int X { get; set; }

        /// <summary>
        /// Position in the universe in the y axis.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("y")]
        public int Y { get; set; }

        /// <summary>
        /// The system's distance from the scanning ship.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("distance")]
        public int Distance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A waypoint that was scanned by a ship.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json68
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json13 Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("systemSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string SystemSymbol { get; set; }

        /// <summary>
        /// Position in the universe in the x axis.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("x")]
        public int X { get; set; }

        /// <summary>
        /// Position in the universe in the y axis.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("y")]
        public int Y { get; set; }

        /// <summary>
        /// List of waypoints that orbit this waypoint.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("orbitals")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json35> Orbitals { get; set; } = new System.Collections.ObjectModel.Collection<Json35>();

        [System.Text.Json.Serialization.JsonPropertyName("faction")]
        public Json41 Faction { get; set; }

        /// <summary>
        /// The traits of the waypoint.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("traits")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json42> Traits { get; set; } = new System.Collections.ObjectModel.Collection<Json42>();

        [System.Text.Json.Serialization.JsonPropertyName("chart")]
        public Json45 Chart { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The ship that was scanned. Details include information about the ship that could be detected by the scanner.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json69
    {
        /// <summary>
        /// The globally unique identifier of the ship.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("registration")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json10 Registration { get; set; } = new Json10();

        [System.Text.Json.Serialization.JsonPropertyName("nav")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json18 Nav { get; set; } = new Json18();

        /// <summary>
        /// The frame of the ship.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("frame")]
        public Frame Frame { get; set; }

        /// <summary>
        /// The reactor of the ship.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reactor")]
        public Reactor Reactor { get; set; }

        /// <summary>
        /// The engine of the ship.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("engine")]
        [System.ComponentModel.DataAnnotations.Required]
        public Engine Engine { get; set; } = new Engine();

        /// <summary>
        /// List of mounts installed in the ship.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mounts")]
        public System.Collections.Generic.ICollection<Mounts> Mounts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Result of a transaction for a ship modification, such as installing a mount or a module.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json70
    {
        /// <summary>
        /// The symbol of the waypoint where the transaction took place.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("waypointSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WaypointSymbol { get; set; }

        /// <summary>
        /// The symbol of the ship that made the transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipSymbol { get; set; }

        /// <summary>
        /// The symbol of the trade good.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tradeSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TradeSymbol { get; set; }

        /// <summary>
        /// The total price of the transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalPrice")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int TotalPrice { get; set; }

        /// <summary>
        /// The timestamp of the transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Result of a scrap transaction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json71
    {

        [System.Text.Json.Serialization.JsonPropertyName("waypointSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string WaypointSymbol { get; set; }

        /// <summary>
        /// The symbol of the ship.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipSymbol { get; set; }

        /// <summary>
        /// The total price of the transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalPrice")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int TotalPrice { get; set; }

        /// <summary>
        /// The timestamp of the transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Result of a repair transaction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Json72
    {

        [System.Text.Json.Serialization.JsonPropertyName("waypointSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string WaypointSymbol { get; set; }

        /// <summary>
        /// The symbol of the ship.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipSymbol { get; set; }

        /// <summary>
        /// The total price of the transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalPrice")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int TotalPrice { get; set; }

        /// <summary>
        /// The timestamp of the transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body
    {

        [System.Text.Json.Serialization.JsonPropertyName("faction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json Faction { get; set; }

        /// <summary>
        /// Your desired agent symbol. This will be a unique name used to represent your agent, and will be the prefix for your ships.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(14, MinimumLength = 3)]
        public string Symbol { get; set; }

        /// <summary>
        /// Your email address. This is used if you reserved your call sign between resets.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body2
    {
        /// <summary>
        /// Symbol of the ship to use.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipSymbol { get; set; }

        /// <summary>
        /// The symbol of the good to supply.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tradeSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TradeSymbol { get; set; }

        /// <summary>
        /// Amount of units to supply.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("units")]
        public int Units { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body3
    {
        /// <summary>
        /// Symbol of a ship located in the destination to deliver a contract and that has a good to deliver in its cargo.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipSymbol { get; set; }

        /// <summary>
        /// The symbol of the good to deliver.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tradeSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TradeSymbol { get; set; }

        /// <summary>
        /// Amount of units to deliver.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("units")]
        public int Units { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body4
    {

        [System.Text.Json.Serialization.JsonPropertyName("shipType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json53 ShipType { get; set; }

        /// <summary>
        /// The symbol of the waypoint you want to purchase the ship at.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("waypointSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WaypointSymbol { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body5
    {
        /// <summary>
        /// The type of good to produce out of the refining process.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("produce")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Body5Produce Produce { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body6
    {

        [System.Text.Json.Serialization.JsonPropertyName("survey")]
        [System.Obsolete]
        public Json61 Survey { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body7
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json29 Symbol { get; set; }

        /// <summary>
        /// Amount of units to jettison of this good.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("units")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Units { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body8
    {
        /// <summary>
        /// The symbol of the waypoint to jump to. The destination must be a connected waypoint.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("waypointSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WaypointSymbol { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body9
    {
        /// <summary>
        /// The target destination.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("waypointSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WaypointSymbol { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body10
    {

        [System.Text.Json.Serialization.JsonPropertyName("flightMode")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json17 FlightMode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body11
    {
        /// <summary>
        /// The target destination.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("waypointSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WaypointSymbol { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SellCargoRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json29 Symbol { get; set; }

        /// <summary>
        /// Amounts of units to sell of the selected good.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("units")]
        public int Units { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body12
    {
        /// <summary>
        /// The amount of fuel to fill in the ship's tanks. When not specified, the ship will be refueled to its maximum fuel capacity. If the amount specified is greater than the ship's remaining capacity, the ship will only be refueled to its maximum fuel capacity. The amount specified is not in market units but in ship fuel units.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("units")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Units { get; set; }

        /// <summary>
        /// Wether to use the FUEL thats in your cargo or not. Default: false
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fromCargo")]
        public bool FromCargo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body13
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json29 Symbol { get; set; }

        /// <summary>
        /// Amounts of units to purchase.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("units")]
        public int Units { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body14
    {

        [System.Text.Json.Serialization.JsonPropertyName("tradeSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json29 TradeSymbol { get; set; }

        /// <summary>
        /// Amount of units to transfer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("units")]
        public int Units { get; set; }

        /// <summary>
        /// The symbol of the ship to transfer to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipSymbol { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body15
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body16
    {
        /// <summary>
        /// The symbol of the mount to remove.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response
    {
        /// <summary>
        /// The current status of the game server.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        /// <summary>
        /// The current version of the API.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Version { get; set; }

        /// <summary>
        /// The date when the game server was last reset.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("resetDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ResetDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("stats")]
        [System.ComponentModel.DataAnnotations.Required]
        public Stats Stats { get; set; } = new Stats();

        [System.Text.Json.Serialization.JsonPropertyName("leaderboards")]
        [System.ComponentModel.DataAnnotations.Required]
        public Leaderboards Leaderboards { get; set; } = new Leaderboards();

        [System.Text.Json.Serialization.JsonPropertyName("serverResets")]
        [System.ComponentModel.DataAnnotations.Required]
        public ServerResets ServerResets { get; set; } = new ServerResets();

        [System.Text.Json.Serialization.JsonPropertyName("announcements")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Announcements> Announcements { get; set; } = new System.Collections.ObjectModel.Collection<Announcements>();

        [System.Text.Json.Serialization.JsonPropertyName("links")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Links> Links { get; set; } = new System.Collections.ObjectModel.Collection<Links>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response2
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data Data { get; set; } = new Data();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response3
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json38> Data { get; set; } = new System.Collections.ObjectModel.Collection<Json38>();

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json39 Meta { get; set; } = new Json39();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response4
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json38 Data { get; set; } = new Json38();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response5
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json46> Data { get; set; } = new System.Collections.ObjectModel.Collection<Json46>();

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json39 Meta { get; set; } = new Json39();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response6
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json46 Data { get; set; } = new Json46();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response7
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json52 Data { get; set; } = new Json52();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response8
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json56 Data { get; set; } = new Json56();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response9
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json57 Data { get; set; } = new Json57();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response10
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json59 Data { get; set; } = new Json59();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response11
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data2 Data { get; set; } = new Data2();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response12
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json8> Data { get; set; } = new System.Collections.ObjectModel.Collection<Json8>();

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json39 Meta { get; set; } = new Json39();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response13
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json8 Data { get; set; } = new Json8();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response14
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public json Data { get; set; } = new json();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response15
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<json> Data { get; set; } = new System.Collections.ObjectModel.Collection<json>();

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json39 Meta { get; set; } = new Json39();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response16
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public json Data { get; set; } = new json();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response17
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json5> Data { get; set; } = new System.Collections.ObjectModel.Collection<Json5>();

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json39 Meta { get; set; } = new Json39();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response18
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json5 Data { get; set; } = new Json5();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response19
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data3 Data { get; set; } = new Data3();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response20
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data4 Data { get; set; } = new Data4();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response21
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data5 Data { get; set; } = new Data5();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response22
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json33> Data { get; set; } = new System.Collections.ObjectModel.Collection<Json33>();

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json39 Meta { get; set; } = new Json39();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response23
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data6 Data { get; set; } = new Data6();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response24
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json33 Data { get; set; } = new Json33();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response25
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json31 Data { get; set; } = new Json31();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response26
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data7 Data { get; set; } = new Data7();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response27
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data8 Data { get; set; } = new Data8();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response28
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data9 Data { get; set; } = new Data9();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response29
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json26 Data { get; set; } = new Json26();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response30
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data10 Data { get; set; } = new Data10();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response31
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data11 Data { get; set; } = new Data11();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response32
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data12 Data { get; set; } = new Data12();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response33
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data13 Data { get; set; } = new Data13();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response34
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data14 Data { get; set; } = new Data14();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response35
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data15 Data { get; set; } = new Data15();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response36
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data16 Data { get; set; } = new Data16();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response37
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data17 Data { get; set; } = new Data17();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response38
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json18 Data { get; set; } = new Json18();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response39
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json18 Data { get; set; } = new Json18();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response40
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data18 Data { get; set; } = new Data18();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response41
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data19 Data { get; set; } = new Data19();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response42
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data20 Data { get; set; } = new Data20();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response43
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data21 Data { get; set; } = new Data21();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response44
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data22 Data { get; set; } = new Data22();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response45
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data23 Data { get; set; } = new Data23();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response46
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data24 Data { get; set; } = new Data24();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response47
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data25 Data { get; set; } = new Data25();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response48
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data26 Data { get; set; } = new Data26();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response49
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json28> Data { get; set; } = new System.Collections.ObjectModel.Collection<Json28>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response50
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data27 Data { get; set; } = new Data27();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response51
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data28 Data { get; set; } = new Data28();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response52
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data29 Data { get; set; } = new Data29();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response53
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data30 Data { get; set; } = new Data30();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response54
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data31 Data { get; set; } = new Data31();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response55
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public Data32 Data { get; set; } = new Data32();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Json5Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROCUREMENT")]
        PROCUREMENT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSPORT")]
        TRANSPORT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SHUTTLE")]
        SHUTTLE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Json19Rotation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STRICT")]
        STRICT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RELAXED")]
        RELAXED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Json23Symbol
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_PROBE")]
        FRAME_PROBE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_DRONE")]
        FRAME_DRONE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_INTERCEPTOR")]
        FRAME_INTERCEPTOR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_RACER")]
        FRAME_RACER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_FIGHTER")]
        FRAME_FIGHTER = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_FRIGATE")]
        FRAME_FRIGATE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_SHUTTLE")]
        FRAME_SHUTTLE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_EXPLORER")]
        FRAME_EXPLORER = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_MINER")]
        FRAME_MINER = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_LIGHT_FREIGHTER")]
        FRAME_LIGHT_FREIGHTER = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_HEAVY_FREIGHTER")]
        FRAME_HEAVY_FREIGHTER = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_TRANSPORT")]
        FRAME_TRANSPORT = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_DESTROYER")]
        FRAME_DESTROYER = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_CRUISER")]
        FRAME_CRUISER = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME_CARRIER")]
        FRAME_CARRIER = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Json24Symbol
    {

        [System.Runtime.Serialization.EnumMember(Value = @"REACTOR_SOLAR_I")]
        REACTOR_SOLAR_I = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"REACTOR_FUSION_I")]
        REACTOR_FUSION_I = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REACTOR_FISSION_I")]
        REACTOR_FISSION_I = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REACTOR_CHEMICAL_I")]
        REACTOR_CHEMICAL_I = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"REACTOR_ANTIMATTER_I")]
        REACTOR_ANTIMATTER_I = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Json25Symbol
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ENGINE_IMPULSE_DRIVE_I")]
        ENGINE_IMPULSE_DRIVE_I = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ENGINE_ION_DRIVE_I")]
        ENGINE_ION_DRIVE_I = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ENGINE_ION_DRIVE_II")]
        ENGINE_ION_DRIVE_II = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ENGINE_HYPER_DRIVE_I")]
        ENGINE_HYPER_DRIVE_I = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Json27Symbol
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_MINERAL_PROCESSOR_I")]
        MODULE_MINERAL_PROCESSOR_I = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_GAS_PROCESSOR_I")]
        MODULE_GAS_PROCESSOR_I = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_CARGO_HOLD_I")]
        MODULE_CARGO_HOLD_I = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_CARGO_HOLD_II")]
        MODULE_CARGO_HOLD_II = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_CARGO_HOLD_III")]
        MODULE_CARGO_HOLD_III = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_CREW_QUARTERS_I")]
        MODULE_CREW_QUARTERS_I = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_ENVOY_QUARTERS_I")]
        MODULE_ENVOY_QUARTERS_I = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_PASSENGER_CABIN_I")]
        MODULE_PASSENGER_CABIN_I = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_MICRO_REFINERY_I")]
        MODULE_MICRO_REFINERY_I = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_ORE_REFINERY_I")]
        MODULE_ORE_REFINERY_I = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_FUEL_REFINERY_I")]
        MODULE_FUEL_REFINERY_I = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_SCIENCE_LAB_I")]
        MODULE_SCIENCE_LAB_I = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_JUMP_DRIVE_I")]
        MODULE_JUMP_DRIVE_I = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_JUMP_DRIVE_II")]
        MODULE_JUMP_DRIVE_II = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_JUMP_DRIVE_III")]
        MODULE_JUMP_DRIVE_III = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_WARP_DRIVE_I")]
        MODULE_WARP_DRIVE_I = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_WARP_DRIVE_II")]
        MODULE_WARP_DRIVE_II = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_WARP_DRIVE_III")]
        MODULE_WARP_DRIVE_III = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_SHIELD_GENERATOR_I")]
        MODULE_SHIELD_GENERATOR_I = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"MODULE_SHIELD_GENERATOR_II")]
        MODULE_SHIELD_GENERATOR_II = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Json28Symbol
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_GAS_SIPHON_I")]
        MOUNT_GAS_SIPHON_I = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_GAS_SIPHON_II")]
        MOUNT_GAS_SIPHON_II = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_GAS_SIPHON_III")]
        MOUNT_GAS_SIPHON_III = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_SURVEYOR_I")]
        MOUNT_SURVEYOR_I = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_SURVEYOR_II")]
        MOUNT_SURVEYOR_II = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_SURVEYOR_III")]
        MOUNT_SURVEYOR_III = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_SENSOR_ARRAY_I")]
        MOUNT_SENSOR_ARRAY_I = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_SENSOR_ARRAY_II")]
        MOUNT_SENSOR_ARRAY_II = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_SENSOR_ARRAY_III")]
        MOUNT_SENSOR_ARRAY_III = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_MINING_LASER_I")]
        MOUNT_MINING_LASER_I = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_MINING_LASER_II")]
        MOUNT_MINING_LASER_II = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_MINING_LASER_III")]
        MOUNT_MINING_LASER_III = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_LASER_CANNON_I")]
        MOUNT_LASER_CANNON_I = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_MISSILE_LAUNCHER_I")]
        MOUNT_MISSILE_LAUNCHER_I = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"MOUNT_TURRET_I")]
        MOUNT_TURRET_I = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposits
    {

        [System.Runtime.Serialization.EnumMember(Value = @"QUARTZ_SAND")]
        QUARTZ_SAND = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SILICON_CRYSTALS")]
        SILICON_CRYSTALS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PRECIOUS_STONES")]
        PRECIOUS_STONES = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ICE_WATER")]
        ICE_WATER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AMMONIA_ICE")]
        AMMONIA_ICE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"IRON_ORE")]
        IRON_ORE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"COPPER_ORE")]
        COPPER_ORE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SILVER_ORE")]
        SILVER_ORE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ALUMINUM_ORE")]
        ALUMINUM_ORE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"GOLD_ORE")]
        GOLD_ORE = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PLATINUM_ORE")]
        PLATINUM_ORE = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"DIAMONDS")]
        DIAMONDS = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"URANITE_ORE")]
        URANITE_ORE = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"MERITIUM_ORE")]
        MERITIUM_ORE = 13,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Consumed
    {
        /// <summary>
        /// The amount of fuel consumed by the most recent transit or action.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Amount { get; set; }

        /// <summary>
        /// The time at which the fuel was consumed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Json48Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PURCHASE")]
        PURCHASE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SELL")]
        SELL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Json51Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EXPORT")]
        EXPORT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IMPORT")]
        IMPORT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EXCHANGE")]
        EXCHANGE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Crew
    {

        [System.Text.Json.Serialization.JsonPropertyName("required")]
        public int Required { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("capacity")]
        public int Capacity { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipTypes
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Json53 Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Json61Size
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SMALL")]
        SMALL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MODERATE")]
        MODERATE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LARGE")]
        LARGE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Json64Symbol
    {

        [System.Runtime.Serialization.EnumMember(Value = @"REACTOR_OVERLOAD")]
        REACTOR_OVERLOAD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ENERGY_SPIKE_FROM_MINERAL")]
        ENERGY_SPIKE_FROM_MINERAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SOLAR_FLARE_INTERFERENCE")]
        SOLAR_FLARE_INTERFERENCE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"COOLANT_LEAK")]
        COOLANT_LEAK = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"POWER_DISTRIBUTION_FLUCTUATION")]
        POWER_DISTRIBUTION_FLUCTUATION = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MAGNETIC_FIELD_DISRUPTION")]
        MAGNETIC_FIELD_DISRUPTION = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"HULL_MICROMETEORITE_STRIKES")]
        HULL_MICROMETEORITE_STRIKES = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"STRUCTURAL_STRESS_FRACTURES")]
        STRUCTURAL_STRESS_FRACTURES = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"CORROSIVE_MINERAL_CONTAMINATION")]
        CORROSIVE_MINERAL_CONTAMINATION = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"THERMAL_EXPANSION_MISMATCH")]
        THERMAL_EXPANSION_MISMATCH = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"VIBRATION_DAMAGE_FROM_DRILLING")]
        VIBRATION_DAMAGE_FROM_DRILLING = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ELECTROMAGNETIC_FIELD_INTERFERENCE")]
        ELECTROMAGNETIC_FIELD_INTERFERENCE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"IMPACT_WITH_EXTRACTED_DEBRIS")]
        IMPACT_WITH_EXTRACTED_DEBRIS = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FUEL_EFFICIENCY_DEGRADATION")]
        FUEL_EFFICIENCY_DEGRADATION = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"COOLANT_SYSTEM_AGEING")]
        COOLANT_SYSTEM_AGEING = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"DUST_MICROABRASIONS")]
        DUST_MICROABRASIONS = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"THRUSTER_NOZZLE_WEAR")]
        THRUSTER_NOZZLE_WEAR = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"EXHAUST_PORT_CLOGGING")]
        EXHAUST_PORT_CLOGGING = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"BEARING_LUBRICATION_FADE")]
        BEARING_LUBRICATION_FADE = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"SENSOR_CALIBRATION_DRIFT")]
        SENSOR_CALIBRATION_DRIFT = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"HULL_MICROMETEORITE_DAMAGE")]
        HULL_MICROMETEORITE_DAMAGE = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"SPACE_DEBRIS_COLLISION")]
        SPACE_DEBRIS_COLLISION = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"THERMAL_STRESS")]
        THERMAL_STRESS = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"VIBRATION_OVERLOAD")]
        VIBRATION_OVERLOAD = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"PRESSURE_DIFFERENTIAL_STRESS")]
        PRESSURE_DIFFERENTIAL_STRESS = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ELECTROMAGNETIC_SURGE_EFFECTS")]
        ELECTROMAGNETIC_SURGE_EFFECTS = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"ATMOSPHERIC_ENTRY_HEAT")]
        ATMOSPHERIC_ENTRY_HEAT = 26,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Json64Component
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FRAME")]
        FRAME = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"REACTOR")]
        REACTOR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ENGINE")]
        ENGINE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Frame
    {
        /// <summary>
        /// The symbol of the frame.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reactor
    {
        /// <summary>
        /// The symbol of the reactor.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Engine
    {
        /// <summary>
        /// The symbol of the engine.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A mount on the ship.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mounts
    {
        /// <summary>
        /// The symbol of the mount.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Body5Produce
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IRON")]
        IRON = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COPPER")]
        COPPER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SILVER")]
        SILVER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GOLD")]
        GOLD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ALUMINUM")]
        ALUMINUM = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PLATINUM")]
        PLATINUM = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"URANITE")]
        URANITE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MERITIUM")]
        MERITIUM = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FUEL")]
        FUEL = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Stats
    {
        /// <summary>
        /// Number of registered agents in the game.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("agents")]
        public int Agents { get; set; }

        /// <summary>
        /// Total number of ships in the game.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ships")]
        public int Ships { get; set; }

        /// <summary>
        /// Total number of systems in the game.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("systems")]
        public int Systems { get; set; }

        /// <summary>
        /// Total number of waypoints in the game.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("waypoints")]
        public int Waypoints { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Leaderboards
    {
        /// <summary>
        /// Top agents with the most credits.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mostCredits")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MostCredits> MostCredits { get; set; } = new System.Collections.ObjectModel.Collection<MostCredits>();

        /// <summary>
        /// Top agents with the most charted submitted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mostSubmittedCharts")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MostSubmittedCharts> MostSubmittedCharts { get; set; } = new System.Collections.ObjectModel.Collection<MostSubmittedCharts>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServerResets
    {
        /// <summary>
        /// The date and time when the game server will reset.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Next { get; set; }

        /// <summary>
        /// How often we intend to reset the game server.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Frequency { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Announcements
    {

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Body { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Links
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("url")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data
    {

        [System.Text.Json.Serialization.JsonPropertyName("agent")]
        [System.ComponentModel.DataAnnotations.Required]
        public json Agent { get; set; } = new json();

        [System.Text.Json.Serialization.JsonPropertyName("contract")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json5 Contract { get; set; } = new Json5();

        [System.Text.Json.Serialization.JsonPropertyName("faction")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json8 Faction { get; set; } = new Json8();

        [System.Text.Json.Serialization.JsonPropertyName("ship")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json33 Ship { get; set; } = new Json33();

        /// <summary>
        /// A Bearer token for accessing secured API endpoints.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("token")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Token { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data2
    {

        [System.Text.Json.Serialization.JsonPropertyName("construction")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json59 Construction { get; set; } = new Json59();

        [System.Text.Json.Serialization.JsonPropertyName("cargo")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json31 Cargo { get; set; } = new Json31();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data3
    {

        [System.Text.Json.Serialization.JsonPropertyName("agent")]
        [System.ComponentModel.DataAnnotations.Required]
        public json Agent { get; set; } = new json();

        [System.Text.Json.Serialization.JsonPropertyName("contract")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json5 Contract { get; set; } = new Json5();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data4
    {

        [System.Text.Json.Serialization.JsonPropertyName("contract")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json5 Contract { get; set; } = new Json5();

        [System.Text.Json.Serialization.JsonPropertyName("cargo")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json31 Cargo { get; set; } = new Json31();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data5
    {

        [System.Text.Json.Serialization.JsonPropertyName("agent")]
        [System.ComponentModel.DataAnnotations.Required]
        public json Agent { get; set; } = new json();

        [System.Text.Json.Serialization.JsonPropertyName("contract")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json5 Contract { get; set; } = new Json5();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data6
    {

        [System.Text.Json.Serialization.JsonPropertyName("agent")]
        [System.ComponentModel.DataAnnotations.Required]
        public json Agent { get; set; } = new json();

        [System.Text.Json.Serialization.JsonPropertyName("ship")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json33 Ship { get; set; } = new Json33();

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json54 Transaction { get; set; } = new Json54();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data7
    {

        [System.Text.Json.Serialization.JsonPropertyName("nav")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json18 Nav { get; set; } = new Json18();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data8
    {

        [System.Text.Json.Serialization.JsonPropertyName("cargo")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json31 Cargo { get; set; } = new Json31();

        [System.Text.Json.Serialization.JsonPropertyName("cooldown")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json26 Cooldown { get; set; } = new Json26();

        /// <summary>
        /// Goods that were produced by this refining process.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("produced")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Produced> Produced { get; set; } = new System.Collections.ObjectModel.Collection<Produced>();

        /// <summary>
        /// Goods that were consumed during this refining process.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("consumed")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<consumed> Consumed { get; set; } = new System.Collections.ObjectModel.Collection<consumed>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data9
    {

        [System.Text.Json.Serialization.JsonPropertyName("chart")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json45 Chart { get; set; } = new Json45();

        [System.Text.Json.Serialization.JsonPropertyName("waypoint")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json46 Waypoint { get; set; } = new Json46();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data10
    {

        [System.Text.Json.Serialization.JsonPropertyName("nav")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json18 Nav { get; set; } = new Json18();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data11
    {

        [System.Text.Json.Serialization.JsonPropertyName("cooldown")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json26 Cooldown { get; set; } = new Json26();

        /// <summary>
        /// Surveys created by this action.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("surveys")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json61> Surveys { get; set; } = new System.Collections.ObjectModel.Collection<Json61>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data12
    {

        [System.Text.Json.Serialization.JsonPropertyName("cooldown")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json26 Cooldown { get; set; } = new Json26();

        [System.Text.Json.Serialization.JsonPropertyName("extraction")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json63 Extraction { get; set; } = new Json63();

        [System.Text.Json.Serialization.JsonPropertyName("cargo")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json31 Cargo { get; set; } = new Json31();

        [System.Text.Json.Serialization.JsonPropertyName("events")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json64> Events { get; set; } = new System.Collections.ObjectModel.Collection<Json64>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data13
    {

        [System.Text.Json.Serialization.JsonPropertyName("cooldown")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json26 Cooldown { get; set; } = new Json26();

        [System.Text.Json.Serialization.JsonPropertyName("siphon")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json66 Siphon { get; set; } = new Json66();

        [System.Text.Json.Serialization.JsonPropertyName("cargo")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json31 Cargo { get; set; } = new Json31();

        [System.Text.Json.Serialization.JsonPropertyName("events")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json64> Events { get; set; } = new System.Collections.ObjectModel.Collection<Json64>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data14
    {

        [System.Text.Json.Serialization.JsonPropertyName("cooldown")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json26 Cooldown { get; set; } = new Json26();

        [System.Text.Json.Serialization.JsonPropertyName("extraction")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json63 Extraction { get; set; } = new Json63();

        [System.Text.Json.Serialization.JsonPropertyName("cargo")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json31 Cargo { get; set; } = new Json31();

        [System.Text.Json.Serialization.JsonPropertyName("events")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json64> Events { get; set; } = new System.Collections.ObjectModel.Collection<Json64>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data15
    {

        [System.Text.Json.Serialization.JsonPropertyName("cargo")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json31 Cargo { get; set; } = new Json31();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data16
    {

        [System.Text.Json.Serialization.JsonPropertyName("nav")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json18 Nav { get; set; } = new Json18();

        [System.Text.Json.Serialization.JsonPropertyName("cooldown")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json26 Cooldown { get; set; } = new Json26();

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json48 Transaction { get; set; } = new Json48();

        [System.Text.Json.Serialization.JsonPropertyName("agent")]
        [System.ComponentModel.DataAnnotations.Required]
        public json Agent { get; set; } = new json();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data17
    {

        [System.Text.Json.Serialization.JsonPropertyName("fuel")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json32 Fuel { get; set; } = new Json32();

        [System.Text.Json.Serialization.JsonPropertyName("nav")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json18 Nav { get; set; } = new Json18();

        [System.Text.Json.Serialization.JsonPropertyName("events")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json64> Events { get; set; } = new System.Collections.ObjectModel.Collection<Json64>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data18
    {

        [System.Text.Json.Serialization.JsonPropertyName("fuel")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json32 Fuel { get; set; } = new Json32();

        [System.Text.Json.Serialization.JsonPropertyName("nav")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json18 Nav { get; set; } = new Json18();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data19
    {

        [System.Text.Json.Serialization.JsonPropertyName("agent")]
        [System.ComponentModel.DataAnnotations.Required]
        public json Agent { get; set; } = new json();

        [System.Text.Json.Serialization.JsonPropertyName("cargo")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json31 Cargo { get; set; } = new Json31();

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json48 Transaction { get; set; } = new Json48();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data20
    {

        [System.Text.Json.Serialization.JsonPropertyName("cooldown")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json26 Cooldown { get; set; } = new Json26();

        /// <summary>
        /// List of scanned systems.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("systems")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json67> Systems { get; set; } = new System.Collections.ObjectModel.Collection<Json67>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data21
    {

        [System.Text.Json.Serialization.JsonPropertyName("cooldown")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json26 Cooldown { get; set; } = new Json26();

        /// <summary>
        /// List of scanned waypoints.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("waypoints")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json68> Waypoints { get; set; } = new System.Collections.ObjectModel.Collection<Json68>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data22
    {

        [System.Text.Json.Serialization.JsonPropertyName("cooldown")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json26 Cooldown { get; set; } = new Json26();

        /// <summary>
        /// List of scanned ships.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ships")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json69> Ships { get; set; } = new System.Collections.ObjectModel.Collection<Json69>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data23
    {

        [System.Text.Json.Serialization.JsonPropertyName("agent")]
        [System.ComponentModel.DataAnnotations.Required]
        public json Agent { get; set; } = new json();

        [System.Text.Json.Serialization.JsonPropertyName("fuel")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json32 Fuel { get; set; } = new Json32();

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json48 Transaction { get; set; } = new Json48();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data24
    {

        [System.Text.Json.Serialization.JsonPropertyName("agent")]
        [System.ComponentModel.DataAnnotations.Required]
        public json Agent { get; set; } = new json();

        [System.Text.Json.Serialization.JsonPropertyName("cargo")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json31 Cargo { get; set; } = new Json31();

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json48 Transaction { get; set; } = new Json48();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data25
    {

        [System.Text.Json.Serialization.JsonPropertyName("cargo")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json31 Cargo { get; set; } = new Json31();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data26
    {

        [System.Text.Json.Serialization.JsonPropertyName("contract")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json5 Contract { get; set; } = new Json5();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data27
    {

        [System.Text.Json.Serialization.JsonPropertyName("agent")]
        [System.ComponentModel.DataAnnotations.Required]
        public json Agent { get; set; } = new json();

        /// <summary>
        /// List of installed mounts after the installation of the new mount.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mounts")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json28> Mounts { get; set; } = new System.Collections.ObjectModel.Collection<Json28>();

        [System.Text.Json.Serialization.JsonPropertyName("cargo")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json31 Cargo { get; set; } = new Json31();

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json70 Transaction { get; set; } = new Json70();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data28
    {

        [System.Text.Json.Serialization.JsonPropertyName("agent")]
        [System.ComponentModel.DataAnnotations.Required]
        public json Agent { get; set; } = new json();

        /// <summary>
        /// List of installed mounts after the removal of the selected mount.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mounts")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Json28> Mounts { get; set; } = new System.Collections.ObjectModel.Collection<Json28>();

        [System.Text.Json.Serialization.JsonPropertyName("cargo")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json31 Cargo { get; set; } = new Json31();

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json70 Transaction { get; set; } = new Json70();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data29
    {

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json71 Transaction { get; set; } = new Json71();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data30
    {

        [System.Text.Json.Serialization.JsonPropertyName("agent")]
        [System.ComponentModel.DataAnnotations.Required]
        public json Agent { get; set; } = new json();

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json71 Transaction { get; set; } = new Json71();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data31
    {

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json72 Transaction { get; set; } = new Json72();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data32
    {

        [System.Text.Json.Serialization.JsonPropertyName("agent")]
        [System.ComponentModel.DataAnnotations.Required]
        public json Agent { get; set; } = new json();

        [System.Text.Json.Serialization.JsonPropertyName("ship")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json33 Ship { get; set; } = new Json33();

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required]
        public Json72 Transaction { get; set; } = new Json72();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MostCredits
    {
        /// <summary>
        /// Symbol of the agent.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("agentSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AgentSymbol { get; set; }

        /// <summary>
        /// Amount of credits.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("credits")]
        public long Credits { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MostSubmittedCharts
    {
        /// <summary>
        /// Symbol of the agent.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("agentSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AgentSymbol { get; set; }

        /// <summary>
        /// Amount of charts done by the agent.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("chartCount")]
        public int ChartCount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Produced
    {
        /// <summary>
        /// Symbol of the good.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tradeSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TradeSymbol { get; set; }

        /// <summary>
        /// Amount of units of the good.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("units")]
        public int Units { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class consumed
    {
        /// <summary>
        /// Symbol of the good.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tradeSymbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TradeSymbol { get; set; }

        /// <summary>
        /// Amount of units of the good.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("units")]
        public int Units { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625